{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0","program":"/home/alexis/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","data_encoding","--edition=2018","/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=47d13bfa91a6ebb5","-C","extra-filename=-47d13bfa91a6ebb5","--out-dir","/home/alexis/Documents/Rust/repo/Rust/xfiveohnine/target/rls/debug/deps","-L","dependency=/home/alexis/Documents/Rust/repo/Rust/xfiveohnine/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/alexis/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/alexis/Documents/Rust/repo/Rust/xfiveohnine/target/rls/debug/deps/libdata_encoding-47d13bfa91a6ebb5.rmeta"},"prelude":{"crate_id":{"name":"data_encoding","disambiguator":[2621181801446064291,8836276514839017641]},"crate_root":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src","external_crates":[{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10344648486569477446,2454248652556920925]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9785299734546160784,636286335322626912]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5680562745065174860,9217186745851755644]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1647702202987759035,15124534591008137148]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16711431240759211485,3970175217288203291]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[125532023394459561,9172165323910118991]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[17639569287364244572,9623243733363078576]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[10466182059741283835,56412014413285874]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6793855748667116046,87956666511033926]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15647227138251999113,1639002543540862534]}},{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[10550792004909319356,1806099500584167781]}}],"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":0,"byte_end":107074,"line_start":1,"line_end":2387,"column_start":1,"column_end":3}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":0,"byte_end":107074,"line_start":1,"line_end":2387,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":207},{"krate":0,"index":203},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":214},{"krate":0,"index":210},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":221},{"krate":0,"index":217},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":228},{"krate":0,"index":224},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":235},{"krate":0,"index":231},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":242},{"krate":0,"index":238},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":249},{"krate":0,"index":245},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":256},{"krate":0,"index":252},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":261},{"krate":0,"index":11},{"krate":0,"index":264},{"krate":0,"index":271},{"krate":0,"index":268},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":273},{"krate":0,"index":291},{"krate":0,"index":290},{"krate":0,"index":288},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":27},{"krate":0,"index":293},{"krate":0,"index":306},{"krate":0,"index":305},{"krate":0,"index":303},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":308},{"krate":0,"index":322},{"krate":0,"index":321},{"krate":0,"index":319},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":81},{"krate":0,"index":86},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":108},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":126},{"krate":0,"index":324},{"krate":0,"index":338},{"krate":0,"index":337},{"krate":0,"index":335},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":340},{"krate":0,"index":352},{"krate":0,"index":350},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":354},{"krate":0,"index":359},{"krate":0,"index":357},{"krate":0,"index":361},{"krate":0,"index":366},{"krate":0,"index":364},{"krate":0,"index":368},{"krate":0,"index":378},{"krate":0,"index":376},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":380},{"krate":0,"index":403},{"krate":0,"index":402},{"krate":0,"index":400},{"krate":0,"index":161},{"krate":0,"index":405},{"krate":0,"index":411},{"krate":0,"index":410},{"krate":0,"index":408},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"decl_id":null,"docs":" Efficient and customizable data-encoding functions like base64, base32, and hex","sig":null,"attributes":[{"value":"! Efficient and customizable data-encoding functions like base64, base32, and hex","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":0,"byte_end":83,"line_start":1,"line_end":1,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":84,"byte_end":87,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This [crate] provides little-endian ASCII base-conversion encodings for","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88,"byte_end":163,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"! bases of size 2, 4, 8, 16, 32, and 64. It supports:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":164,"byte_end":219,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":220,"byte_end":223,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! - padded and unpadded encodings","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":224,"byte_end":259,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"! - canonical encodings (e.g. trailing bits are checked)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":260,"byte_end":318,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"! - in-place encoding and decoding functions","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":319,"byte_end":365,"line_start":8,"line_end":8,"column_start":1,"column_end":47}},{"value":"! - partial decoding functions (e.g. for error recovery)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":366,"byte_end":424,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"! - character translation (e.g. for case-insensitivity)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":425,"byte_end":482,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"! - most and least significant bit-order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":483,"byte_end":525,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"! - ignoring characters when decoding (e.g. for skipping newlines)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":526,"byte_end":594,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"! - wrapping the output when encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":595,"byte_end":634,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"! - no-std with `std` and `alloc` features","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":635,"byte_end":679,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":680,"byte_end":683,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! The performance of the encoding and decoding functions are similar to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":684,"byte_end":757,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! existing implementations (see how to run the benchmarks on [github]).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":758,"byte_end":831,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":832,"byte_end":835,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! This is the library documentation. If you are looking for the [binary], see","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":836,"byte_end":915,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! the installation instructions on [github].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":916,"byte_end":962,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":963,"byte_end":966,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":967,"byte_end":981,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":982,"byte_end":985,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! This crate provides predefined encodings as [constants]. These constants are","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":986,"byte_end":1066,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"! of type [`Encoding`]. This type provides encoding and decoding functions","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1067,"byte_end":1143,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"! with in-place or allocating variants. Here is an example using the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1144,"byte_end":1214,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"! allocating encoding function of [base64]:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1215,"byte_end":1260,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1261,"byte_end":1264,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1265,"byte_end":1276,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1277,"byte_end":1307,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"! assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1308,"byte_end":1374,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"! ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1375,"byte_end":1382,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1383,"byte_end":1386,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Here is an example using the in-place decoding function of [base32]:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1387,"byte_end":1459,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1464,"byte_end":1475,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"! use data_encoding::BASE32;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1476,"byte_end":1506,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"! let input = b\"JBSWY3DPEB3W64TMMQ======\";","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1507,"byte_end":1551,"line_start":38,"line_end":38,"column_start":1,"column_end":45}},{"value":"! let mut output = vec![0; BASE32.decode_len(input.len()).unwrap()];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1552,"byte_end":1622,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"! let len = BASE32.decode_mut(input, &mut output).unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1623,"byte_end":1684,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"! assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1685,"byte_end":1735,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"! ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1736,"byte_end":1743,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1744,"byte_end":1747,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! You are not limited to the predefined encodings. You may define your own","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1748,"byte_end":1824,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! encodings (with the same correctness and performance properties as the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1825,"byte_end":1899,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! predefined ones) using the [`Specification`] type:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1900,"byte_end":1954,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1955,"byte_end":1958,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1959,"byte_end":1970,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"! use data_encoding::Specification;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":1971,"byte_end":2008,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"! let hex = {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2009,"byte_end":2024,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"!     let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2025,"byte_end":2069,"line_start":51,"line_end":51,"column_start":1,"column_end":45}},{"value":"!     spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2070,"byte_end":2120,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"!     spec.encoding().unwrap()","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2121,"byte_end":2153,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"! };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2154,"byte_end":2160,"line_start":54,"line_end":54,"column_start":1,"column_end":7}},{"value":"! assert_eq!(hex.encode(b\"hello\"), \"68656c6c6f\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2161,"byte_end":2212,"line_start":55,"line_end":55,"column_start":1,"column_end":52}},{"value":"! ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2213,"byte_end":2220,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2221,"byte_end":2224,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! If you use the [`lazy_static`] crate, you can define a global encoding:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2225,"byte_end":2300,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2301,"byte_end":2304,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! ```rust,ignore","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2305,"byte_end":2323,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"! lazy_static! {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2324,"byte_end":2342,"line_start":61,"line_end":61,"column_start":1,"column_end":19}},{"value":"!     static ref HEX: Encoding = {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2343,"byte_end":2379,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"!         let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2380,"byte_end":2428,"line_start":63,"line_end":63,"column_start":1,"column_end":49}},{"value":"!         spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2429,"byte_end":2483,"line_start":64,"line_end":64,"column_start":1,"column_end":55}},{"value":"!         spec.translate.from.push_str(\"ABCDEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2484,"byte_end":2535,"line_start":65,"line_end":65,"column_start":1,"column_end":52}},{"value":"!         spec.translate.to.push_str(\"abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2536,"byte_end":2585,"line_start":66,"line_end":66,"column_start":1,"column_end":50}},{"value":"!         spec.encoding().unwrap()","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2586,"byte_end":2622,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"!     };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2623,"byte_end":2633,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"! }","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2634,"byte_end":2639,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2640,"byte_end":2647,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2648,"byte_end":2651,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! You may also use the [macro] library to define a compile-time custom encoding:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2652,"byte_end":2734,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2735,"byte_end":2738,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! ```rust,ignore","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2739,"byte_end":2757,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"! const HEX: Encoding = new_encoding!{","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2758,"byte_end":2798,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"!     symbols: \"0123456789abcdef\",","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2799,"byte_end":2835,"line_start":76,"line_end":76,"column_start":1,"column_end":37}},{"value":"!     translate_from: \"ABCDEF\",","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2836,"byte_end":2869,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"!     translate_to: \"abcdef\",","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2870,"byte_end":2901,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"! };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2902,"byte_end":2908,"line_start":79,"line_end":79,"column_start":1,"column_end":7}},{"value":"! const BASE64: Encoding = new_encoding!{","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2909,"byte_end":2952,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"!     symbols: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":2953,"byte_end":3037,"line_start":81,"line_end":81,"column_start":1,"column_end":85}},{"value":"!     padding: '=',","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3038,"byte_end":3059,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"! };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3060,"byte_end":3066,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"! ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3067,"byte_end":3074,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3075,"byte_end":3078,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! # Properties","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3079,"byte_end":3095,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3096,"byte_end":3099,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! The [base16], [base32], [base32hex], [base64], and [base64url] predefined","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3100,"byte_end":3177,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"! encodings are conform to [RFC4648].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3178,"byte_end":3217,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3218,"byte_end":3221,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"! In general, the encoding and decoding functions satisfy the following","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3222,"byte_end":3295,"line_start":91,"line_end":91,"column_start":1,"column_end":74}},{"value":"! properties:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3296,"byte_end":3311,"line_start":92,"line_end":92,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3312,"byte_end":3315,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! - They are deterministic: their output only depends on their input","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3316,"byte_end":3386,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"! - They have no side-effects: they do not modify a hidden mutable state","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3387,"byte_end":3461,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"! - They are correct: encoding then decoding gives the initial data","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3462,"byte_end":3531,"line_start":96,"line_end":96,"column_start":1,"column_end":70}},{"value":"! - They are canonical (unless [`is_canonical`] returns false): decoding then","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3532,"byte_end":3611,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"! encoding gives the initial data","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3612,"byte_end":3647,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3648,"byte_end":3651,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"! This last property is usually not satisfied by common base64 implementations","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3652,"byte_end":3732,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"! (like the `rustc-serialize` crate, the `base64` crate, or the `base64` GNU","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3733,"byte_end":3811,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"! program). This is a matter of choice and this crate has made the choice to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3812,"byte_end":3890,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"! let the user choose. Support for canonical encoding as described by the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3891,"byte_end":3966,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"! [RFC][canonical] is provided. But it is also possible to disable checking","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":3967,"byte_end":4044,"line_start":104,"line_end":104,"column_start":1,"column_end":78}},{"value":"! trailing bits, to add characters translation, to decode concatenated padded","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4045,"byte_end":4124,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"! inputs, and to ignore some characters.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4125,"byte_end":4167,"line_start":106,"line_end":106,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4168,"byte_end":4171,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"! Since the RFC specifies the encoding function on all inputs and the decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4172,"byte_end":4252,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"! function on all possible encoded outputs, the differences between","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4253,"byte_end":4322,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"! implementations come from the decoding function which may be more or less","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4323,"byte_end":4400,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"! permissive. In this crate, the decoding function of canonical encodings","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4401,"byte_end":4476,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"! rejects all inputs that are not a possible output of the encoding function.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4477,"byte_end":4556,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"! Here are some concrete examples of decoding differences between this crate,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4557,"byte_end":4636,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"! the `rustc-serialize` crate, the `base64` crate, and the `base64` GNU","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4637,"byte_end":4710,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"! program:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4711,"byte_end":4723,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4724,"byte_end":4727,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! | Input      | `data-encoding` | `rustc`  | `base64` | GNU `base64`  |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4728,"byte_end":4802,"line_start":117,"line_end":117,"column_start":1,"column_end":75}},{"value":"! | ---------- | --------------- | -------- | -------- | ------------- |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4803,"byte_end":4877,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"! | `AAB=`     | `Trailing(2)`   | `[0, 0]` | `Err(2)` | `\\x00\\x00`    |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4878,"byte_end":4952,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"! | `AA\\nB=`   | `Length(4)`     | `[0, 0]` | `Length` | `\\x00\\x00`    |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":4953,"byte_end":5027,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"! | `AAB`      | `Length(0)`     | `[0, 0]` | `Err(2)` | Invalid input |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5028,"byte_end":5102,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"! | `A\\rA\\nB=` | `Length(4)`     | `[0, 0]` | `Err(1)` | Invalid input |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5103,"byte_end":5177,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"! | `-_\\r\\n`   | `Symbol(0)`     | `[251]`  | `Err(0)` | Invalid input |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5178,"byte_end":5252,"line_start":123,"line_end":123,"column_start":1,"column_end":75}},{"value":"! | `AA==AA==` | `[0, 0]`        | `Err`    | `Err(2)` | `\\x00\\x00`    |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5253,"byte_end":5327,"line_start":124,"line_end":124,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5328,"byte_end":5331,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! We can summarize these discrepancies as follows:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5332,"byte_end":5384,"line_start":126,"line_end":126,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5385,"byte_end":5388,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"! | Discrepancy | `data-encoding` | `rustc` | `base64` | GNU `base64` |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5389,"byte_end":5462,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"! | ----------- | --------------- | ------- | -------- | ------------ |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5463,"byte_end":5536,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"! | Check trailing bits | Yes | No | No | No |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5537,"byte_end":5585,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"! | Ignored characters | None | `\\r` and `\\n` | None | `\\n` |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5586,"byte_end":5649,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! | Translated characters | None | `-_` mapped to `+/` | None | None |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5650,"byte_end":5722,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"! | Check padding | Yes | No | No | Yes |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5723,"byte_end":5766,"line_start":133,"line_end":133,"column_start":1,"column_end":44}},{"value":"! | Support concatenated input | Yes | No | No | Yes |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5767,"byte_end":5823,"line_start":134,"line_end":134,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5824,"byte_end":5827,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! This crate permits to disable checking trailing bits. It permits to ignore","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5828,"byte_end":5906,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"! some characters. It permits to translate characters. It permits to use","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5907,"byte_end":5981,"line_start":137,"line_end":137,"column_start":1,"column_end":75}},{"value":"! unpadded encodings. However, for padded encodings, support for concatenated","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":5982,"byte_end":6061,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"! inputs cannot be disabled. This is simply because it doesn't make sense to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6062,"byte_end":6140,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"! use padding if it is not to support concatenated inputs.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6141,"byte_end":6201,"line_start":140,"line_end":140,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6202,"byte_end":6205,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"! # Migration","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6206,"byte_end":6221,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6222,"byte_end":6225,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! The [changelog] describes the changes between v1 and v2. Here are the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6226,"byte_end":6299,"line_start":144,"line_end":144,"column_start":1,"column_end":74}},{"value":"! migration steps for common usage:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6300,"byte_end":6337,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6338,"byte_end":6341,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"! | v1                          | v2                          |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6342,"byte_end":6407,"line_start":147,"line_end":147,"column_start":1,"column_end":66}},{"value":"! | --------------------------- | --------------------------- |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6408,"byte_end":6473,"line_start":148,"line_end":148,"column_start":1,"column_end":66}},{"value":"! | `use data_encoding::baseNN` | `use data_encoding::BASENN` |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6474,"byte_end":6539,"line_start":149,"line_end":149,"column_start":1,"column_end":66}},{"value":"! | `baseNN::function`          | `BASENN.method`             |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6540,"byte_end":6605,"line_start":150,"line_end":150,"column_start":1,"column_end":66}},{"value":"! | `baseNN::function_nopad`    | `BASENN_NOPAD.method`       |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6606,"byte_end":6671,"line_start":151,"line_end":151,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6672,"byte_end":6675,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"! [`Encoding`]: struct.Encoding.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6676,"byte_end":6714,"line_start":153,"line_end":153,"column_start":1,"column_end":39}},{"value":"! [`Specification`]: struct.Specification.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6715,"byte_end":6763,"line_start":154,"line_end":154,"column_start":1,"column_end":49}},{"value":"! [`is_canonical`]: struct.Encoding.html#method.is_canonical","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6764,"byte_end":6826,"line_start":155,"line_end":155,"column_start":1,"column_end":63}},{"value":"! [`lazy_static`]: https://crates.io/crates/lazy_static","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6827,"byte_end":6884,"line_start":156,"line_end":156,"column_start":1,"column_end":58}},{"value":"! [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6885,"byte_end":6935,"line_start":157,"line_end":157,"column_start":1,"column_end":51}},{"value":"! [base16]: constant.HEXUPPER.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6936,"byte_end":6972,"line_start":158,"line_end":158,"column_start":1,"column_end":37}},{"value":"! [base32]: constant.BASE32.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":6973,"byte_end":7007,"line_start":159,"line_end":159,"column_start":1,"column_end":35}},{"value":"! [base32hex]: constant.BASE32HEX.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7008,"byte_end":7048,"line_start":160,"line_end":160,"column_start":1,"column_end":41}},{"value":"! [base64]: constant.BASE64.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7049,"byte_end":7083,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"! [base64url]: constant.BASE64URL.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7084,"byte_end":7124,"line_start":162,"line_end":162,"column_start":1,"column_end":41}},{"value":"! [binary]: https://crates.io/crates/data-encoding-bin","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7125,"byte_end":7181,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"! [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7182,"byte_end":7246,"line_start":164,"line_end":164,"column_start":1,"column_end":65}},{"value":"! [changelog]:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7247,"byte_end":7263,"line_start":165,"line_end":165,"column_start":1,"column_end":17}},{"value":"!     https://github.com/ia0/data-encoding/blob/master/lib/CHANGELOG.md","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7264,"byte_end":7337,"line_start":166,"line_end":166,"column_start":1,"column_end":74}},{"value":"! [constants]: index.html#constants","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7338,"byte_end":7375,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"! [crate]: https://crates.io/crates/data-encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7376,"byte_end":7427,"line_start":168,"line_end":168,"column_start":1,"column_end":52}},{"value":"! [github]: https://github.com/ia0/data-encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7428,"byte_end":7478,"line_start":169,"line_end":169,"column_start":1,"column_end":51}},{"value":"! [macro]: https://crates.io/crates/data-encoding-macro","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7479,"byte_end":7536,"line_start":170,"line_end":170,"column_start":1,"column_end":58}},{"value":"warn(unused_results, missing_docs)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":7581,"byte_end":7619,"line_start":173,"line_end":173,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":274},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10941,"byte_end":10947,"line_start":309,"line_end":309,"column_start":5,"column_end":11},"name":"Length","qualname":"::DecodeKind::Length","value":"DecodeKind::Length","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Invalid length\n","sig":null,"attributes":[{"value":"/ Invalid length","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10918,"byte_end":10936,"line_start":308,"line_end":308,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":276},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10976,"byte_end":10982,"line_start":311,"line_end":311,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::DecodeKind::Symbol","value":"DecodeKind::Symbol","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Invalid symbol\n","sig":null,"attributes":[{"value":"/ Invalid symbol","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10953,"byte_end":10971,"line_start":310,"line_end":310,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":278},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11019,"byte_end":11027,"line_start":313,"line_end":313,"column_start":5,"column_end":13},"name":"Trailing","qualname":"::DecodeKind::Trailing","value":"DecodeKind::Trailing","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Non-zero trailing bits\n","sig":null,"attributes":[{"value":"/ Non-zero trailing bits","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10988,"byte_end":11014,"line_start":312,"line_end":312,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":280},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11064,"byte_end":11071,"line_start":315,"line_end":315,"column_start":5,"column_end":12},"name":"Padding","qualname":"::DecodeKind::Padding","value":"DecodeKind::Padding","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Invalid padding length\n","sig":null,"attributes":[{"value":"/ Invalid padding length","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11033,"byte_end":11059,"line_start":314,"line_end":314,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":273},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10901,"byte_end":10911,"line_start":307,"line_end":307,"column_start":10,"column_end":20},"name":"DecodeKind","qualname":"::DecodeKind","value":"DecodeKind::{Length, Symbol, Trailing, Padding}","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280}],"decl_id":null,"docs":" Decoding error kind\n","sig":null,"attributes":[{"value":"/ Decoding error kind","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":10823,"byte_end":10846,"line_start":305,"line_end":305,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11606,"byte_end":11617,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"DecodeError","qualname":"::DecodeError","value":"DecodeError { position, kind }","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11531,"byte_end":11549,"line_start":330,"line_end":330,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":294},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11766,"byte_end":11774,"line_start":337,"line_end":337,"column_start":9,"column_end":17},"name":"position","qualname":"::DecodeError::position","value":"usize","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Error position","sig":null,"attributes":[{"value":"/ Error position","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11624,"byte_end":11642,"line_start":333,"line_end":333,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11647,"byte_end":11650,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ This position is always a valid input position and represents the first","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11655,"byte_end":11730,"line_start":335,"line_end":335,"column_start":5,"column_end":80}},{"value":"/ encountered error.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11735,"byte_end":11757,"line_start":336,"line_end":336,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":295},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11810,"byte_end":11814,"line_start":339,"line_end":339,"column_start":9,"column_end":13},"name":"kind","qualname":"::DecodeError::kind","value":"DecodeKind","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Error kind\n","sig":null,"attributes":[{"value":"/ Error kind","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11787,"byte_end":11801,"line_start":338,"line_end":338,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12190,"byte_end":12203,"line_start":352,"line_end":352,"column_start":12,"column_end":25},"name":"DecodePartial","qualname":"::DecodePartial","value":"DecodePartial { read, written, error }","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"decl_id":null,"docs":" Decoding error with partial result\n","sig":null,"attributes":[{"value":"/ Decoding error with partial result","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12095,"byte_end":12133,"line_start":350,"line_end":350,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":309},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12352,"byte_end":12356,"line_start":357,"line_end":357,"column_start":9,"column_end":13},"name":"read","qualname":"::DecodePartial::read","value":"usize","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Number of bytes read from input","sig":null,"attributes":[{"value":"/ Number of bytes read from input","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12210,"byte_end":12245,"line_start":353,"line_end":353,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12250,"byte_end":12253,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the error position: `read <=","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12258,"byte_end":12318,"line_start":355,"line_end":355,"column_start":5,"column_end":65}},{"value":"/ error.position`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12323,"byte_end":12343,"line_start":356,"line_end":356,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":310},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12519,"byte_end":12526,"line_start":363,"line_end":363,"column_start":9,"column_end":16},"name":"written","qualname":"::DecodePartial::written","value":"usize","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Number of bytes written to output","sig":null,"attributes":[{"value":"/ Number of bytes written to output","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12370,"byte_end":12407,"line_start":359,"line_end":359,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12412,"byte_end":12415,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the decoded length: `written <=","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12420,"byte_end":12483,"line_start":361,"line_end":361,"column_start":5,"column_end":68}},{"value":"/ decode_len(read)`.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12488,"byte_end":12510,"line_start":362,"line_end":362,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":311},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12567,"byte_end":12572,"line_start":366,"line_end":366,"column_start":9,"column_end":14},"name":"error","qualname":"::DecodePartial::error","value":"DecodeError","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":12540,"byte_end":12558,"line_start":365,"line_end":365,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":325},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29828,"byte_end":29848,"line_start":839,"line_end":839,"column_start":5,"column_end":25},"name":"MostSignificantFirst","qualname":"::BitOrder::MostSignificantFirst","value":"BitOrder::MostSignificantFirst","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Most significant bit first","sig":null,"attributes":[{"value":"/ Most significant bit first","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29414,"byte_end":29444,"line_start":831,"line_end":831,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29449,"byte_end":29452,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This is the most common and most intuitive bit-order. In particular,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29457,"byte_end":29529,"line_start":833,"line_end":833,"column_start":5,"column_end":77}},{"value":"/ this is the bit-order used by [RFC4648] and thus the usual hexadecimal,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29534,"byte_end":29609,"line_start":834,"line_end":834,"column_start":5,"column_end":80}},{"value":"/ base64, base32, base64url, and base32hex encodings. This is the default","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29614,"byte_end":29689,"line_start":835,"line_end":835,"column_start":5,"column_end":80}},{"value":"/ bit-order when [specifying](struct.Specification.html) a base.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29694,"byte_end":29760,"line_start":836,"line_end":836,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29765,"byte_end":29768,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29773,"byte_end":29823,"line_start":838,"line_end":838,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30269,"byte_end":30290,"line_start":854,"line_end":854,"column_start":5,"column_end":26},"name":"LeastSignificantFirst","qualname":"::BitOrder::LeastSignificantFirst","value":"BitOrder::LeastSignificantFirst","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Least significant bit first","sig":null,"attributes":[{"value":"/ Least significant bit first","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29855,"byte_end":29886,"line_start":841,"line_end":841,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29891,"byte_end":29894,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29899,"byte_end":29913,"line_start":843,"line_end":843,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29918,"byte_end":29921,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ DNSCurve [base32] uses least significant bit first:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29926,"byte_end":29981,"line_start":845,"line_end":845,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29986,"byte_end":29989,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29994,"byte_end":30005,"line_start":847,"line_end":847,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE32_DNSCURVE;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30010,"byte_end":30049,"line_start":848,"line_end":848,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(BASE32_DNSCURVE.encode(&[0x64, 0x88]), \"4321\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30054,"byte_end":30116,"line_start":849,"line_end":849,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(BASE32_DNSCURVE.decode(b\"4321\").unwrap(), vec![0x64, 0x88]);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30121,"byte_end":30196,"line_start":850,"line_end":850,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30201,"byte_end":30208,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30213,"byte_end":30216,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ [base32]: constant.BASE32_DNSCURVE.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30221,"byte_end":30264,"line_start":853,"line_end":853,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":324},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29399,"byte_end":29407,"line_start":830,"line_end":830,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"BitOrder::{MostSignificantFirst, LeastSignificantFirst}","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":327}],"decl_id":null,"docs":" Order in which bits are read from a byte","sig":null,"attributes":[{"value":"/ Order in which bits are read from a byte","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28024,"byte_end":28068,"line_start":800,"line_end":800,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28069,"byte_end":28072,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ The base-conversion encoding is always little-endian. This means that the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28073,"byte_end":28150,"line_start":802,"line_end":802,"column_start":1,"column_end":78}},{"value":"/ least significant *byte* is always first. However, we can still choose","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28151,"byte_end":28225,"line_start":803,"line_end":803,"column_start":1,"column_end":75}},{"value":"/ whether, within a byte, this is the most significant or the least","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28226,"byte_end":28295,"line_start":804,"line_end":804,"column_start":1,"column_end":70}},{"value":"/ significant *bit* that is first. If the terminology is confusing, testing on","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28296,"byte_end":28376,"line_start":805,"line_end":805,"column_start":1,"column_end":81}},{"value":"/ an asymmetrical example should be enough to choose the correct value.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28377,"byte_end":28450,"line_start":806,"line_end":806,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28451,"byte_end":28454,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28455,"byte_end":28469,"line_start":808,"line_end":808,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28470,"byte_end":28473,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ In the following example, we can see that a base with the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28474,"byte_end":28535,"line_start":810,"line_end":810,"column_start":1,"column_end":62}},{"value":"/ `MostSignificantFirst` bit-order has the most significant bit first in the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28536,"byte_end":28614,"line_start":811,"line_end":811,"column_start":1,"column_end":79}},{"value":"/ encoded output. In particular, the output is in the same order as the bits","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28615,"byte_end":28693,"line_start":812,"line_end":812,"column_start":1,"column_end":79}},{"value":"/ in the byte. The opposite happens with the `LeastSignificantFirst`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28694,"byte_end":28764,"line_start":813,"line_end":813,"column_start":1,"column_end":71}},{"value":"/ bit-order. The least significant bit is first and the output is in the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28765,"byte_end":28839,"line_start":814,"line_end":814,"column_start":1,"column_end":75}},{"value":"/ reverse order.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28840,"byte_end":28858,"line_start":815,"line_end":815,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28859,"byte_end":28862,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28863,"byte_end":28874,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{BitOrder, Specification};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28875,"byte_end":28924,"line_start":818,"line_end":818,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28925,"byte_end":28965,"line_start":819,"line_end":819,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"01\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28966,"byte_end":28998,"line_start":820,"line_end":820,"column_start":1,"column_end":33}},{"value":"/ // spec.bit_order = BitOrder::MostSignificantFirst;  // default","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":28999,"byte_end":29066,"line_start":821,"line_end":821,"column_start":1,"column_end":68}},{"value":"/ let msb = spec.encoding().unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29067,"byte_end":29106,"line_start":822,"line_end":822,"column_start":1,"column_end":40}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29107,"byte_end":29160,"line_start":823,"line_end":823,"column_start":1,"column_end":54}},{"value":"/ let lsb = spec.encoding().unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29161,"byte_end":29200,"line_start":824,"line_end":824,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(msb.encode(&[0b01010011]), \"01010011\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29201,"byte_end":29255,"line_start":825,"line_end":825,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(lsb.encode(&[0b01010011]), \"11001010\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29256,"byte_end":29310,"line_start":826,"line_end":826,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29311,"byte_end":29318,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":29364,"byte_end":29389,"line_start":829,"line_end":829,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30395,"byte_end":30411,"line_start":861,"line_end":861,"column_start":10,"column_end":26},"name":"InternalEncoding","qualname":"::InternalEncoding","value":"Cow<'static, [u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30360,"byte_end":30385,"line_start":860,"line_end":860,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31420,"byte_end":31428,"line_start":891,"line_end":891,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Base-conversion encoding","sig":null,"attributes":[{"value":"/ Base-conversion encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30525,"byte_end":30553,"line_start":867,"line_end":867,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30554,"byte_end":30557,"line_start":868,"line_end":868,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for technical details or how","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30558,"byte_end":30637,"line_start":869,"line_end":869,"column_start":1,"column_end":80}},{"value":"/ to define a new one.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":30638,"byte_end":30662,"line_start":870,"line_end":870,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31795,"byte_end":31804,"line_start":901,"line_end":901,"column_start":12,"column_end":21},"name":"Translate","qualname":"::Translate","value":"Translate { from, to }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31453,"byte_end":31498,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31499,"byte_end":31502,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ The order matters. The first character of the `from` field is translated to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31503,"byte_end":31582,"line_start":895,"line_end":895,"column_start":1,"column_end":80}},{"value":"/ the first character of the `to` field. The second to the second. Etc.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31583,"byte_end":31656,"line_start":896,"line_end":896,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31657,"byte_end":31660,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31661,"byte_end":31733,"line_start":898,"line_end":898,"column_start":1,"column_end":73}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31758,"byte_end":31783,"line_start":900,"line_end":900,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":355},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31852,"byte_end":31856,"line_start":903,"line_end":903,"column_start":9,"column_end":13},"name":"from","qualname":"::Translate::from","value":"std::string::String","parent":{"krate":0,"index":354},"children":[],"decl_id":null,"docs":" Characters to translate from\n","sig":null,"attributes":[{"value":"/ Characters to translate from","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31811,"byte_end":31843,"line_start":902,"line_end":902,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":356},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31909,"byte_end":31911,"line_start":905,"line_end":905,"column_start":9,"column_end":11},"name":"to","qualname":"::Translate::to","value":"std::string::String","parent":{"krate":0,"index":354},"children":[],"decl_id":null,"docs":" Characters to translate to\n","sig":null,"attributes":[{"value":"/ Characters to translate to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31870,"byte_end":31900,"line_start":904,"line_end":904,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":361},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32103,"byte_end":32107,"line_start":913,"line_end":913,"column_start":12,"column_end":16},"name":"Wrap","qualname":"::Wrap","value":"Wrap { width, separator }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31924,"byte_end":31964,"line_start":908,"line_end":908,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31965,"byte_end":31968,"line_start":909,"line_end":909,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":31969,"byte_end":32041,"line_start":910,"line_end":910,"column_start":1,"column_end":73}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32066,"byte_end":32091,"line_start":912,"line_end":912,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":362},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32406,"byte_end":32411,"line_start":923,"line_end":923,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrap::width","value":"usize","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Wrapping width","sig":null,"attributes":[{"value":"/ Wrapping width","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32114,"byte_end":32132,"line_start":914,"line_end":914,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32137,"byte_end":32140,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32145,"byte_end":32171,"line_start":916,"line_end":916,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32176,"byte_end":32179,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ - 8 for a bit-width of 1 (binary), 3 (octal), and 5 (base32)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32184,"byte_end":32248,"line_start":918,"line_end":918,"column_start":5,"column_end":69}},{"value":"/ - 4 for a bit-width of 2 (base4) and 6 (base64)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32253,"byte_end":32304,"line_start":919,"line_end":919,"column_start":5,"column_end":56}},{"value":"/ - 2 for a bit-width of 4 (hexadecimal)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32309,"byte_end":32351,"line_start":920,"line_end":920,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32356,"byte_end":32359,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if null.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32364,"byte_end":32397,"line_start":922,"line_end":922,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":363},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32504,"byte_end":32513,"line_start":928,"line_end":928,"column_start":9,"column_end":18},"name":"separator","qualname":"::Wrap::separator","value":"std::string::String","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Wrapping characters","sig":null,"attributes":[{"value":"/ Wrapping characters","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32425,"byte_end":32448,"line_start":925,"line_end":925,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32453,"byte_end":32456,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if empty.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32461,"byte_end":32495,"line_start":927,"line_end":927,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":368},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42912,"byte_end":42925,"line_start":1183,"line_end":1183,"column_start":12,"column_end":25},"name":"Specification","qualname":"::Specification","value":"Specification { symbols, bit_order, check_trailing_bits, padding, ignore, wrap, translate }","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375}],"decl_id":null,"docs":" Base-conversion specification","sig":null,"attributes":[{"value":"/ Base-conversion specification","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32526,"byte_end":32559,"line_start":931,"line_end":931,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32560,"byte_end":32563,"line_start":932,"line_end":932,"column_start":1,"column_end":4}},{"value":"/ It is possible to define custom encodings given a specification. To do so,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32564,"byte_end":32642,"line_start":933,"line_end":933,"column_start":1,"column_end":79}},{"value":"/ it is important to understand the theory first.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32643,"byte_end":32694,"line_start":934,"line_end":934,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32695,"byte_end":32698,"line_start":935,"line_end":935,"column_start":1,"column_end":4}},{"value":"/ # Theory","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32699,"byte_end":32711,"line_start":936,"line_end":936,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32712,"byte_end":32715,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ Each subsection has an equivalent subsection in the [Practice](#practice)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32716,"byte_end":32793,"line_start":938,"line_end":938,"column_start":1,"column_end":78}},{"value":"/ section.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32794,"byte_end":32806,"line_start":939,"line_end":939,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32807,"byte_end":32810,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32811,"byte_end":32824,"line_start":941,"line_end":941,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32825,"byte_end":32828,"line_start":942,"line_end":942,"column_start":1,"column_end":4}},{"value":"/ The main idea of a [base-conversion] encoding is to see `[u8]` as numbers","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32829,"byte_end":32906,"line_start":943,"line_end":943,"column_start":1,"column_end":78}},{"value":"/ written in little-endian base256 and convert them in another little-endian","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32907,"byte_end":32985,"line_start":944,"line_end":944,"column_start":1,"column_end":79}},{"value":"/ base. For performance reasons, this crate restricts this other base to be of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":32986,"byte_end":33066,"line_start":945,"line_end":945,"column_start":1,"column_end":81}},{"value":"/ size 2 (binary), 4 (base4), 8 (octal), 16 (hexadecimal), 32 (base32), or 64","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33067,"byte_end":33146,"line_start":946,"line_end":946,"column_start":1,"column_end":80}},{"value":"/ (base64). The converted number is written as `[u8]` although it doesn't use","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33147,"byte_end":33226,"line_start":947,"line_end":947,"column_start":1,"column_end":80}},{"value":"/ all the 256 possible values of `u8`. This crate encodes to ASCII, so only","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33227,"byte_end":33304,"line_start":948,"line_end":948,"column_start":1,"column_end":78}},{"value":"/ values smaller than 128 are allowed.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33305,"byte_end":33345,"line_start":949,"line_end":949,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33346,"byte_end":33349,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/ More precisely, we need the following elements:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33350,"byte_end":33401,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33402,"byte_end":33405,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/ - The bit-width N: 1 for binary, 2 for base4, 3 for octal, 4 for","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33406,"byte_end":33474,"line_start":953,"line_end":953,"column_start":1,"column_end":69}},{"value":"/ hexadecimal, 5 for base32, and 6 for base64","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33475,"byte_end":33522,"line_start":954,"line_end":954,"column_start":1,"column_end":48}},{"value":"/ - The [bit-order](enum.BitOrder.html): most or least significant bit first","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33523,"byte_end":33601,"line_start":955,"line_end":955,"column_start":1,"column_end":79}},{"value":"/ - The symbols function S from [0, 2<sup>N</sup>) (called values and written","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33602,"byte_end":33681,"line_start":956,"line_end":956,"column_start":1,"column_end":80}},{"value":"/ `uN`) to symbols (represented as `u8` although only ASCII symbols are","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33682,"byte_end":33755,"line_start":957,"line_end":957,"column_start":1,"column_end":74}},{"value":"/ allowed, i.e. smaller than 128)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33756,"byte_end":33791,"line_start":958,"line_end":958,"column_start":1,"column_end":36}},{"value":"/ - The values partial function V from ASCII to [0, 2<sup>N</sup>), i.e. from","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33792,"byte_end":33871,"line_start":959,"line_end":959,"column_start":1,"column_end":80}},{"value":"/ `u8` to `uN`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33872,"byte_end":33888,"line_start":960,"line_end":960,"column_start":1,"column_end":17}},{"value":"/ - Whether trailing bits are checked: trailing bits are leading zeros in","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33889,"byte_end":33964,"line_start":961,"line_end":961,"column_start":1,"column_end":76}},{"value":"/ theory, but since numbers are little-endian they come last","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":33965,"byte_end":34027,"line_start":962,"line_end":962,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34028,"byte_end":34031,"line_start":963,"line_end":963,"column_start":1,"column_end":4}},{"value":"/ For the encoding to be correct (i.e. encoding then decoding gives back the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34032,"byte_end":34110,"line_start":964,"line_end":964,"column_start":1,"column_end":79}},{"value":"/ initial input), V(S(i)) must be defined and equal to i for all i in [0,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34111,"byte_end":34186,"line_start":965,"line_end":965,"column_start":1,"column_end":76}},{"value":"/ 2<sup>N</sup>). For the encoding to be [canonical][canonical] (i.e.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34187,"byte_end":34258,"line_start":966,"line_end":966,"column_start":1,"column_end":72}},{"value":"/ different inputs decode to different outputs, or equivalently, decoding then","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34259,"byte_end":34339,"line_start":967,"line_end":967,"column_start":1,"column_end":81}},{"value":"/ encoding gives back the initial input), trailing bits must be checked and if","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34340,"byte_end":34420,"line_start":968,"line_end":968,"column_start":1,"column_end":81}},{"value":"/ V(i) is defined then S(V(i)) is equal to i for all i.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34421,"byte_end":34478,"line_start":969,"line_end":969,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34479,"byte_end":34482,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ Encoding and decoding are given by the following pipeline:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34483,"byte_end":34545,"line_start":971,"line_end":971,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34546,"byte_end":34549,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34550,"byte_end":34561,"line_start":973,"line_end":973,"column_start":1,"column_end":12}},{"value":"/ [u8] <--1--> [[bit; 8]] <--2--> [[bit; N]] <--3--> [uN] <--4--> [u8]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34562,"byte_end":34634,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/ 1: Map bit-order between each u8 and [bit; 8]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34635,"byte_end":34684,"line_start":975,"line_end":975,"column_start":1,"column_end":50}},{"value":"/ 2: Base conversion between base 2^8 and base 2^N (check trailing bits)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34685,"byte_end":34759,"line_start":976,"line_end":976,"column_start":1,"column_end":75}},{"value":"/ 3: Map bit-order between each [bit; N] and uN","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34760,"byte_end":34809,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ 4: Map symbols/values between each uN and u8 (values must be defined)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34810,"byte_end":34883,"line_start":978,"line_end":978,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34884,"byte_end":34891,"line_start":979,"line_end":979,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34892,"byte_end":34895,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34896,"byte_end":34913,"line_start":981,"line_end":981,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34914,"byte_end":34917,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ All these extensions make the encoding not canonical.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34918,"byte_end":34975,"line_start":983,"line_end":983,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34976,"byte_end":34979,"line_start":984,"line_end":984,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34980,"byte_end":34995,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":34996,"byte_end":34999,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ Padding is useful if the following conditions are met:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35000,"byte_end":35058,"line_start":987,"line_end":987,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35059,"byte_end":35062,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ - the bit-width is 3 (octal), 5 (base32), or 6 (base64)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35063,"byte_end":35122,"line_start":989,"line_end":989,"column_start":1,"column_end":60}},{"value":"/ - the length of the data to encode is not known in advance","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35123,"byte_end":35185,"line_start":990,"line_end":990,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35186,"byte_end":35189,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ Bases for which the bit-width N does not divide 8 may not concatenate","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35190,"byte_end":35263,"line_start":992,"line_end":992,"column_start":1,"column_end":74}},{"value":"/ encoded data. This comes from the fact that it is not possible to make the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35264,"byte_end":35342,"line_start":993,"line_end":993,"column_start":1,"column_end":79}},{"value":"/ difference between trailing bits and encoding bits. Padding solves this","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35343,"byte_end":35418,"line_start":994,"line_end":994,"column_start":1,"column_end":76}},{"value":"/ issue by adding a new character (which is not a symbol) to discriminate","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35419,"byte_end":35494,"line_start":995,"line_end":995,"column_start":1,"column_end":76}},{"value":"/ between trailing bits and encoding bits. The idea is to work by blocks of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35495,"byte_end":35572,"line_start":996,"line_end":996,"column_start":1,"column_end":78}},{"value":"/ lcm(8, N) bits, where lcm(8, N) is the least common multiple of 8 and N.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35573,"byte_end":35649,"line_start":997,"line_end":997,"column_start":1,"column_end":77}},{"value":"/ When such block is not complete, it is padded.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35650,"byte_end":35700,"line_start":998,"line_end":998,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35701,"byte_end":35704,"line_start":999,"line_end":999,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the padding character must not be a symbol.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35705,"byte_end":35777,"line_start":1000,"line_end":1000,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35778,"byte_end":35781,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35782,"byte_end":35821,"line_start":1002,"line_end":1002,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35822,"byte_end":35825,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ Ignoring characters when decoding is useful if after encoding some","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35826,"byte_end":35896,"line_start":1004,"line_end":1004,"column_start":1,"column_end":71}},{"value":"/ characters are added for convenience or any other reason (like wrapping). In","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35897,"byte_end":35977,"line_start":1005,"line_end":1005,"column_start":1,"column_end":81}},{"value":"/ that case we want to first ignore thoses characters before decoding.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":35978,"byte_end":36050,"line_start":1006,"line_end":1006,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36051,"byte_end":36054,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, ignored characters must not contain symbols or the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36055,"byte_end":36134,"line_start":1008,"line_end":1008,"column_start":1,"column_end":80}},{"value":"/ padding character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36135,"byte_end":36157,"line_start":1009,"line_end":1009,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36158,"byte_end":36161,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36162,"byte_end":36195,"line_start":1011,"line_end":1011,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36196,"byte_end":36199,"line_start":1012,"line_end":1012,"column_start":1,"column_end":4}},{"value":"/ Wrapping output when encoding is useful if the output is meant to be printed","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36200,"byte_end":36280,"line_start":1013,"line_end":1013,"column_start":1,"column_end":81}},{"value":"/ in a document where width is limited (typically 80-columns documents). In","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36281,"byte_end":36358,"line_start":1014,"line_end":1014,"column_start":1,"column_end":78}},{"value":"/ that case, the wrapping width and the wrapping separator have to be defined.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36359,"byte_end":36439,"line_start":1015,"line_end":1015,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36440,"byte_end":36443,"line_start":1016,"line_end":1016,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the wrapping separator characters must be ignored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36444,"byte_end":36522,"line_start":1017,"line_end":1017,"column_start":1,"column_end":79}},{"value":"/ (see previous subsection). As such, wrapping separator characters must also","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36523,"byte_end":36602,"line_start":1018,"line_end":1018,"column_start":1,"column_end":80}},{"value":"/ not contain symbols or the padding character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36603,"byte_end":36652,"line_start":1019,"line_end":1019,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36653,"byte_end":36656,"line_start":1020,"line_end":1020,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36657,"byte_end":36699,"line_start":1021,"line_end":1021,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36700,"byte_end":36703,"line_start":1022,"line_end":1022,"column_start":1,"column_end":4}},{"value":"/ Translating characters when decoding is useful when encoded data may be","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36704,"byte_end":36779,"line_start":1023,"line_end":1023,"column_start":1,"column_end":76}},{"value":"/ copied by a humain instead of a machine. Humans tend to confuse some","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36780,"byte_end":36852,"line_start":1024,"line_end":1024,"column_start":1,"column_end":73}},{"value":"/ characters for others. In that case we want to translate those characters","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36853,"byte_end":36930,"line_start":1025,"line_end":1025,"column_start":1,"column_end":78}},{"value":"/ before decoding.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36931,"byte_end":36951,"line_start":1026,"line_end":1026,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36952,"byte_end":36955,"line_start":1027,"line_end":1027,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the characters we translate from must not contain","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":36956,"byte_end":37034,"line_start":1028,"line_end":1028,"column_start":1,"column_end":79}},{"value":"/ symbols or the padding character, and the characters we translate to must","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37035,"byte_end":37112,"line_start":1029,"line_end":1029,"column_start":1,"column_end":78}},{"value":"/ only contain symbols or the padding character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37113,"byte_end":37163,"line_start":1030,"line_end":1030,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37164,"byte_end":37167,"line_start":1031,"line_end":1031,"column_start":1,"column_end":4}},{"value":"/ # Practice","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37168,"byte_end":37182,"line_start":1032,"line_end":1032,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37183,"byte_end":37186,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37187,"byte_end":37200,"line_start":1034,"line_end":1034,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37201,"byte_end":37204,"line_start":1035,"line_end":1035,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37205,"byte_end":37216,"line_start":1036,"line_end":1036,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, Specification};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37217,"byte_end":37266,"line_start":1037,"line_end":1037,"column_start":1,"column_end":50}},{"value":"/ fn make_encoding(symbols: &str) -> Encoding {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37267,"byte_end":37316,"line_start":1038,"line_end":1038,"column_start":1,"column_end":50}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37317,"byte_end":37361,"line_start":1039,"line_end":1039,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(symbols);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37362,"byte_end":37401,"line_start":1040,"line_end":1040,"column_start":1,"column_end":40}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37402,"byte_end":37434,"line_start":1041,"line_end":1041,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37435,"byte_end":37440,"line_start":1042,"line_end":1042,"column_start":1,"column_end":6}},{"value":"/ let binary = make_encoding(\"01\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37441,"byte_end":37478,"line_start":1043,"line_end":1043,"column_start":1,"column_end":38}},{"value":"/ let octal = make_encoding(\"01234567\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37479,"byte_end":37521,"line_start":1044,"line_end":1044,"column_start":1,"column_end":43}},{"value":"/ let hexadecimal = make_encoding(\"0123456789abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37522,"byte_end":37578,"line_start":1045,"line_end":1045,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(binary.encode(b\"Bit\"), \"010000100110100101110100\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37579,"byte_end":37645,"line_start":1046,"line_end":1046,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(octal.encode(b\"Bit\"), \"20464564\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37646,"byte_end":37695,"line_start":1047,"line_end":1047,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(hexadecimal.encode(b\"Bit\"), \"426974\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37696,"byte_end":37749,"line_start":1048,"line_end":1048,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37750,"byte_end":37757,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37758,"byte_end":37761,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The `binary` base has 2 symbols `0` and `1` with value 0 and 1 respectively.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37762,"byte_end":37842,"line_start":1051,"line_end":1051,"column_start":1,"column_end":81}},{"value":"/ The `octal` base has 8 symbols `0` to `7` with value 0 to 7. The","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37843,"byte_end":37911,"line_start":1052,"line_end":1052,"column_start":1,"column_end":69}},{"value":"/ `hexadecimal` base has 16 symbols `0` to `9` and `a` to `f` with value 0 to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37912,"byte_end":37991,"line_start":1053,"line_end":1053,"column_start":1,"column_end":80}},{"value":"/ 15. The following diagram gives the idea of how encoding works in the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":37992,"byte_end":38065,"line_start":1054,"line_end":1054,"column_start":1,"column_end":74}},{"value":"/ previous example (note that we can actually write such diagram only because","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38066,"byte_end":38145,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ the bit-order is most significant first):","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38146,"byte_end":38191,"line_start":1056,"line_end":1056,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38192,"byte_end":38195,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38196,"byte_end":38207,"line_start":1058,"line_end":1058,"column_start":1,"column_end":12}},{"value":"/ [      octal] |  2  :  0  :  4  :  6  :  4  :  5  :  6  :  4  |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38208,"byte_end":38275,"line_start":1059,"line_end":1059,"column_start":1,"column_end":68}},{"value":"/ [     binary] |0 1 0 0 0 0 1 0|0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38276,"byte_end":38343,"line_start":1060,"line_end":1060,"column_start":1,"column_end":68}},{"value":"/ [hexadecimal] |   4   :   2   |   6   :   9   |   7   :   4   |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38344,"byte_end":38411,"line_start":1061,"line_end":1061,"column_start":1,"column_end":68}},{"value":"/                ^-- LSB                                       ^-- MSB","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38412,"byte_end":38484,"line_start":1062,"line_end":1062,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38485,"byte_end":38492,"line_start":1063,"line_end":1063,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38493,"byte_end":38496,"line_start":1064,"line_end":1064,"column_start":1,"column_end":4}},{"value":"/ Note that in theory, these little-endian numbers are read from right to left","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38497,"byte_end":38577,"line_start":1065,"line_end":1065,"column_start":1,"column_end":81}},{"value":"/ (the most significant bit is at the right). Since leading zeros are","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38578,"byte_end":38649,"line_start":1066,"line_end":1066,"column_start":1,"column_end":72}},{"value":"/ meaningless (in our usual decimal notation 0123 is the same as 123), it","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38650,"byte_end":38725,"line_start":1067,"line_end":1067,"column_start":1,"column_end":76}},{"value":"/ explains why trailing bits must be zero. Trailing bits may occur when the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38726,"byte_end":38803,"line_start":1068,"line_end":1068,"column_start":1,"column_end":78}},{"value":"/ bit-width of a base does not divide 8. Only binary, base4, and hexadecimal","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38804,"byte_end":38882,"line_start":1069,"line_end":1069,"column_start":1,"column_end":79}},{"value":"/ don't have trailing bits issues. So let's consider octal and base64, which","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38883,"byte_end":38961,"line_start":1070,"line_end":1070,"column_start":1,"column_end":79}},{"value":"/ have trailing bits in similar circumstances:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":38962,"byte_end":39010,"line_start":1071,"line_end":1071,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39011,"byte_end":39014,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39015,"byte_end":39026,"line_start":1073,"line_end":1073,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39027,"byte_end":39080,"line_start":1074,"line_end":1074,"column_start":1,"column_end":54}},{"value":"/ let octal = {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39081,"byte_end":39098,"line_start":1075,"line_end":1075,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39099,"byte_end":39143,"line_start":1076,"line_end":1076,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39144,"byte_end":39186,"line_start":1077,"line_end":1077,"column_start":1,"column_end":43}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39187,"byte_end":39219,"line_start":1078,"line_end":1078,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39220,"byte_end":39226,"line_start":1079,"line_end":1079,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(BASE64_NOPAD.encode(b\"B\"), \"Qg\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39227,"byte_end":39275,"line_start":1080,"line_end":1080,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39276,"byte_end":39318,"line_start":1081,"line_end":1081,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39319,"byte_end":39326,"line_start":1082,"line_end":1082,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39327,"byte_end":39330,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ We have the following diagram, where the base64 values are written between","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39331,"byte_end":39409,"line_start":1084,"line_end":1084,"column_start":1,"column_end":79}},{"value":"/ parentheses:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39410,"byte_end":39426,"line_start":1085,"line_end":1085,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39427,"byte_end":39430,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39431,"byte_end":39442,"line_start":1087,"line_end":1087,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   : [has 4 zero trailing bits]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39443,"byte_end":39508,"line_start":1088,"line_end":1088,"column_start":1,"column_end":66}},{"value":"/ [ octal] |  2  :  0  :  4  :       [has 1 zero trailing bit ]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39509,"byte_end":39574,"line_start":1089,"line_end":1089,"column_start":1,"column_end":66}},{"value":"/          |0 1 0 0 0 0 1 0|0 0 0 0","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39575,"byte_end":39612,"line_start":1090,"line_end":1090,"column_start":1,"column_end":38}},{"value":"/ [ ascii] |       B       |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39613,"byte_end":39643,"line_start":1091,"line_end":1091,"column_start":1,"column_end":31}},{"value":"/                           ^-^-^-^-- leading zeros / trailing bits","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39644,"byte_end":39713,"line_start":1092,"line_end":1092,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39714,"byte_end":39721,"line_start":1093,"line_end":1093,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39722,"byte_end":39725,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39726,"byte_end":39743,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39744,"byte_end":39747,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39748,"byte_end":39763,"line_start":1097,"line_end":1097,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39764,"byte_end":39767,"line_start":1098,"line_end":1098,"column_start":1,"column_end":4}},{"value":"/ For octal and base64, lcm(8, 3) == lcm(8, 6) == 24 bits or 3 bytes. For","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39768,"byte_end":39843,"line_start":1099,"line_end":1099,"column_start":1,"column_end":76}},{"value":"/ base32, lcm(8, 5) is 40 bits or 5 bytes. Let's consider octal and base64:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39844,"byte_end":39921,"line_start":1100,"line_end":1100,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39922,"byte_end":39925,"line_start":1101,"line_end":1101,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39926,"byte_end":39937,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39938,"byte_end":39985,"line_start":1103,"line_end":1103,"column_start":1,"column_end":48}},{"value":"/ let octal = {","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":39986,"byte_end":40003,"line_start":1104,"line_end":1104,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40004,"byte_end":40048,"line_start":1105,"line_end":1105,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40049,"byte_end":40091,"line_start":1106,"line_end":1106,"column_start":1,"column_end":43}},{"value":"/     spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40092,"byte_end":40125,"line_start":1107,"line_end":1107,"column_start":1,"column_end":34}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40126,"byte_end":40158,"line_start":1108,"line_end":1108,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40159,"byte_end":40165,"line_start":1109,"line_end":1109,"column_start":1,"column_end":7}},{"value":"/ // We start encoding but we only have \"B\" for now.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40166,"byte_end":40220,"line_start":1110,"line_end":1110,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(BASE64.encode(b\"B\"), \"Qg==\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40221,"byte_end":40265,"line_start":1111,"line_end":1111,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204=====\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40266,"byte_end":40313,"line_start":1112,"line_end":1112,"column_start":1,"column_end":48}},{"value":"/ // Now we have \"it\".","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40314,"byte_end":40338,"line_start":1113,"line_end":1113,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(BASE64.encode(b\"it\"), \"aXQ=\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40339,"byte_end":40384,"line_start":1114,"line_end":1114,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(octal.encode(b\"it\"), \"322720==\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40385,"byte_end":40433,"line_start":1115,"line_end":1115,"column_start":1,"column_end":49}},{"value":"/ // By concatenating everything, we may decode the original data.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40434,"byte_end":40502,"line_start":1116,"line_end":1116,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(BASE64.decode(b\"Qg==aXQ=\").unwrap(), b\"Bit\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40503,"byte_end":40563,"line_start":1117,"line_end":1117,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(octal.decode(b\"204=====322720==\").unwrap(), b\"Bit\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40564,"byte_end":40631,"line_start":1118,"line_end":1118,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40632,"byte_end":40639,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40640,"byte_end":40643,"line_start":1120,"line_end":1120,"column_start":1,"column_end":4}},{"value":"/ We have the following diagrams:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40644,"byte_end":40679,"line_start":1121,"line_end":1121,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40680,"byte_end":40683,"line_start":1122,"line_end":1122,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40684,"byte_end":40695,"line_start":1123,"line_end":1123,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   :     =     :     =     |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40696,"byte_end":40758,"line_start":1124,"line_end":1124,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  2  :  0  :  4  :  =  :  =  :  =  :  =  :  =  |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40759,"byte_end":40821,"line_start":1125,"line_end":1125,"column_start":1,"column_end":63}},{"value":"/          |0 1 0 0 0 0 1 0|. . . . . . . .|. . . . . . . .|","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40822,"byte_end":40884,"line_start":1126,"line_end":1126,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       B       |        end of block aligned --^","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40885,"byte_end":40947,"line_start":1127,"line_end":1127,"column_start":1,"column_end":63}},{"value":"/          ^-- beginning of block aligned","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40948,"byte_end":40991,"line_start":1128,"line_end":1128,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40992,"byte_end":40995,"line_start":1129,"line_end":1129,"column_start":1,"column_end":4}},{"value":"/ [base64] |   a(26)   :   X(23)   :   Q(16)   :     =     |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":40996,"byte_end":41058,"line_start":1130,"line_end":1130,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  3  :  2  :  2  :  7  :  2  :  0  :  =  :  =  |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41059,"byte_end":41121,"line_start":1131,"line_end":1131,"column_start":1,"column_end":63}},{"value":"/          |0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|. . . . . . . .|","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41122,"byte_end":41184,"line_start":1132,"line_end":1132,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       i       |       t       |","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41185,"byte_end":41231,"line_start":1133,"line_end":1133,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41232,"byte_end":41239,"line_start":1134,"line_end":1134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41240,"byte_end":41243,"line_start":1135,"line_end":1135,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41244,"byte_end":41283,"line_start":1136,"line_end":1136,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41284,"byte_end":41287,"line_start":1137,"line_end":1137,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to ignore newlines (`\\r` and `\\n`). But to keep the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41288,"byte_end":41367,"line_start":1138,"line_end":1138,"column_start":1,"column_end":80}},{"value":"/ example small, we will ignore spaces.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41368,"byte_end":41409,"line_start":1139,"line_end":1139,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41410,"byte_end":41413,"line_start":1140,"line_end":1140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41414,"byte_end":41425,"line_start":1141,"line_end":1141,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41426,"byte_end":41485,"line_start":1142,"line_end":1142,"column_start":1,"column_end":60}},{"value":"/ spec.ignore.push_str(\" \\t\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41486,"byte_end":41518,"line_start":1143,"line_end":1143,"column_start":1,"column_end":33}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41519,"byte_end":41559,"line_start":1144,"line_end":1144,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"42 69 74\"), base.decode(b\"426974\"));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41560,"byte_end":41625,"line_start":1145,"line_end":1145,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41626,"byte_end":41633,"line_start":1146,"line_end":1146,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41634,"byte_end":41637,"line_start":1147,"line_end":1147,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41638,"byte_end":41671,"line_start":1148,"line_end":1148,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41672,"byte_end":41675,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to wrap after 64 or 76 characters with a newline","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41676,"byte_end":41752,"line_start":1150,"line_end":1150,"column_start":1,"column_end":77}},{"value":"/ (`\\r\\n` or `\\n`). But to keep the example small, we will wrap after 8","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41753,"byte_end":41826,"line_start":1151,"line_end":1151,"column_start":1,"column_end":74}},{"value":"/ characters with a space.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41827,"byte_end":41855,"line_start":1152,"line_end":1152,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41856,"byte_end":41859,"line_start":1153,"line_end":1153,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41860,"byte_end":41871,"line_start":1154,"line_end":1154,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::BASE64.specification();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41872,"byte_end":41929,"line_start":1155,"line_end":1155,"column_start":1,"column_end":58}},{"value":"/ spec.wrap.width = 8;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41930,"byte_end":41954,"line_start":1156,"line_end":1156,"column_start":1,"column_end":25}},{"value":"/ spec.wrap.separator.push_str(\" \");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41955,"byte_end":41993,"line_start":1157,"line_end":1157,"column_start":1,"column_end":39}},{"value":"/ let base64 = spec.encoding().unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":41994,"byte_end":42036,"line_start":1158,"line_end":1158,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(base64.encode(b\"Hey you\"), \"SGV5IHlv dQ== \");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42037,"byte_end":42097,"line_start":1159,"line_end":1159,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42098,"byte_end":42105,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42106,"byte_end":42109,"line_start":1161,"line_end":1161,"column_start":1,"column_end":4}},{"value":"/ Note that the output always ends with the separator.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42110,"byte_end":42166,"line_start":1162,"line_end":1162,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42167,"byte_end":42170,"line_start":1163,"line_end":1163,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42171,"byte_end":42213,"line_start":1164,"line_end":1164,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42214,"byte_end":42217,"line_start":1165,"line_end":1165,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to translate lowercase to uppercase or reciprocally,","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42218,"byte_end":42298,"line_start":1166,"line_end":1166,"column_start":1,"column_end":81}},{"value":"/ but it is also used for letters that look alike, like `O0` or `Il1`. Let's","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42299,"byte_end":42377,"line_start":1167,"line_end":1167,"column_start":1,"column_end":79}},{"value":"/ illustrate both examples.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42378,"byte_end":42407,"line_start":1168,"line_end":1168,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42408,"byte_end":42411,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42412,"byte_end":42423,"line_start":1170,"line_end":1170,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42424,"byte_end":42483,"line_start":1171,"line_end":1171,"column_start":1,"column_end":60}},{"value":"/ spec.translate.from.push_str(\"ABCDEFOIl\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42484,"byte_end":42530,"line_start":1172,"line_end":1172,"column_start":1,"column_end":47}},{"value":"/ spec.translate.to.push_str(\"abcdef011\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42531,"byte_end":42575,"line_start":1173,"line_end":1173,"column_start":1,"column_end":45}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42576,"byte_end":42616,"line_start":1174,"line_end":1174,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"BOIl\"), base.decode(b\"b011\"));","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42617,"byte_end":42676,"line_start":1175,"line_end":1175,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42677,"byte_end":42684,"line_start":1176,"line_end":1176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42685,"byte_end":42688,"line_start":1177,"line_end":1177,"column_start":1,"column_end":4}},{"value":"/ [base-conversion]:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42689,"byte_end":42711,"line_start":1178,"line_end":1178,"column_start":1,"column_end":23}},{"value":"/     https://en.wikipedia.org/wiki/Positional_notation#Base_conversion","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42712,"byte_end":42785,"line_start":1179,"line_end":1179,"column_start":1,"column_end":74}},{"value":"/ [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42786,"byte_end":42850,"line_start":1180,"line_end":1180,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42875,"byte_end":42900,"line_start":1182,"line_end":1182,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43107,"byte_end":43114,"line_start":1188,"line_end":1188,"column_start":9,"column_end":16},"name":"symbols","qualname":"::Specification::symbols","value":"std::string::String","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Symbols","sig":null,"attributes":[{"value":"/ Symbols","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42932,"byte_end":42943,"line_start":1184,"line_end":1184,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42948,"byte_end":42951,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ The number of symbols must be 2, 4, 8, 16, 32, or 64. Symbols must be","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":42956,"byte_end":43029,"line_start":1186,"line_end":1186,"column_start":5,"column_end":78}},{"value":"/ ASCII characters (smaller than 128) and they must be unique.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43034,"byte_end":43098,"line_start":1187,"line_end":1187,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":370},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43253,"byte_end":43262,"line_start":1194,"line_end":1194,"column_start":9,"column_end":18},"name":"bit_order","qualname":"::Specification::bit_order","value":"BitOrder","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Bit-order","sig":null,"attributes":[{"value":"/ Bit-order","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43129,"byte_end":43142,"line_start":1190,"line_end":1190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43147,"byte_end":43150,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ The default is to use most significant bit first since it is the most","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43155,"byte_end":43228,"line_start":1192,"line_end":1192,"column_start":5,"column_end":78}},{"value":"/ common.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43233,"byte_end":43244,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":371},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43450,"byte_end":43469,"line_start":1200,"line_end":1200,"column_start":9,"column_end":28},"name":"check_trailing_bits","qualname":"::Specification::check_trailing_bits","value":"bool","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Check trailing bits","sig":null,"attributes":[{"value":"/ Check trailing bits","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43279,"byte_end":43302,"line_start":1196,"line_end":1196,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43307,"byte_end":43310,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ The default is to check trailing bits. This field is ignored when","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43315,"byte_end":43384,"line_start":1198,"line_end":1198,"column_start":5,"column_end":74}},{"value":"/ unnecessary (i.e. for base2, base4, and base16).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43389,"byte_end":43441,"line_start":1199,"line_end":1199,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":372},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43623,"byte_end":43630,"line_start":1206,"line_end":1206,"column_start":9,"column_end":16},"name":"padding","qualname":"::Specification::padding","value":"std::option::Option<char>","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Padding","sig":null,"attributes":[{"value":"/ Padding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43482,"byte_end":43493,"line_start":1202,"line_end":1202,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43498,"byte_end":43501,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ The default is to not use padding. The padding character must be ASCII","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43506,"byte_end":43580,"line_start":1204,"line_end":1204,"column_start":5,"column_end":79}},{"value":"/ and must not be a symbol.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43585,"byte_end":43614,"line_start":1205,"line_end":1205,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":373},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43866,"byte_end":43872,"line_start":1212,"line_end":1212,"column_start":9,"column_end":15},"name":"ignore","qualname":"::Specification::ignore","value":"std::string::String","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Characters to ignore when decoding","sig":null,"attributes":[{"value":"/ Characters to ignore when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43651,"byte_end":43689,"line_start":1208,"line_end":1208,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43694,"byte_end":43697,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ The default is to not ignore characters when decoding. The characters to","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43702,"byte_end":43778,"line_start":1210,"line_end":1210,"column_start":5,"column_end":81}},{"value":"/ ignore must be ASCII and must not be symbols or the padding character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43783,"byte_end":43857,"line_start":1211,"line_end":1211,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":374},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44109,"byte_end":44113,"line_start":1219,"line_end":1219,"column_start":9,"column_end":13},"name":"wrap","qualname":"::Specification::wrap","value":"Wrap","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43887,"byte_end":43927,"line_start":1214,"line_end":1214,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43932,"byte_end":43935,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ The default is to not wrap the output when encoding. The wrapping","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":43940,"byte_end":44009,"line_start":1216,"line_end":1216,"column_start":5,"column_end":74}},{"value":"/ characters must be ASCII and must not be symbols or the padding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44014,"byte_end":44081,"line_start":1217,"line_end":1217,"column_start":5,"column_end":72}},{"value":"/ character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44086,"byte_end":44100,"line_start":1218,"line_end":1218,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":375},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44522,"byte_end":44531,"line_start":1228,"line_end":1228,"column_start":9,"column_end":18},"name":"translate","qualname":"::Specification::translate","value":"Translate","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44126,"byte_end":44171,"line_start":1221,"line_end":1221,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44176,"byte_end":44179,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ The default is to not translate characters when decoding. The characters","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44184,"byte_end":44260,"line_start":1223,"line_end":1223,"column_start":5,"column_end":81}},{"value":"/ to translate from must be ASCII and must not have already been assigned","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44265,"byte_end":44340,"line_start":1224,"line_end":1224,"column_start":5,"column_end":80}},{"value":"/ a semantics. The characters to translate to must be ASCII and must have","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44345,"byte_end":44420,"line_start":1225,"line_end":1225,"column_start":5,"column_end":80}},{"value":"/ been assigned a semantics (symbol, padding character, or ignored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44425,"byte_end":44493,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}},{"value":"/ character).","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44498,"byte_end":44513,"line_start":1227,"line_end":1227,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45647,"byte_end":45657,"line_start":1276,"line_end":1276,"column_start":12,"column_end":22},"name":"encode_len","qualname":"<Encoding>::encode_len","value":"fn (&self, len: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the encoded length of an input of length `len`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45451,"byte_end":45509,"line_start":1271,"line_end":1271,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45514,"byte_end":45517,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ See [`encode_mut`] for when to use it.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45522,"byte_end":45564,"line_start":1273,"line_end":1273,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45569,"byte_end":45572,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ [`encode_mut`]: struct.Encoding.html#method.encode_mut","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45577,"byte_end":45635,"line_start":1275,"line_end":1275,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46566,"byte_end":46576,"line_start":1305,"line_end":1305,"column_start":12,"column_end":22},"name":"encode_mut","qualname":"<Encoding>::encode_mut","value":"fn (&self, input: &[u8], output: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encodes `input` in `output`","sig":null,"attributes":[{"value":"/ Encodes `input` in `output`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45925,"byte_end":45956,"line_start":1285,"line_end":1285,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45961,"byte_end":45964,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45969,"byte_end":45981,"line_start":1287,"line_end":1287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45986,"byte_end":45989,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":45994,"byte_end":46056,"line_start":1289,"line_end":1289,"column_start":5,"column_end":67}},{"value":"/ [`encode_len`] for the `input` length.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46061,"byte_end":46103,"line_start":1290,"line_end":1290,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46108,"byte_end":46111,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46116,"byte_end":46130,"line_start":1292,"line_end":1292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46135,"byte_end":46138,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46143,"byte_end":46154,"line_start":1294,"line_end":1294,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46159,"byte_end":46189,"line_start":1295,"line_end":1295,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46194,"byte_end":46230,"line_start":1296,"line_end":1296,"column_start":5,"column_end":41}},{"value":"/ let input = b\"Hello world\";","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46235,"byte_end":46266,"line_start":1297,"line_end":1297,"column_start":5,"column_end":36}},{"value":"/ let output = &mut buffer[0 .. BASE64.encode_len(input.len())];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46271,"byte_end":46337,"line_start":1298,"line_end":1298,"column_start":5,"column_end":71}},{"value":"/ BASE64.encode_mut(input, output);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46342,"byte_end":46379,"line_start":1299,"line_end":1299,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(output, b\"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46384,"byte_end":46428,"line_start":1300,"line_end":1300,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46433,"byte_end":46440,"line_start":1301,"line_end":1301,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46445,"byte_end":46448,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ [`encode_len`]: struct.Encoding.html#method.encode_len","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46453,"byte_end":46511,"line_start":1303,"line_end":1303,"column_start":5,"column_end":63}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46516,"byte_end":46554,"line_start":1304,"line_end":1304,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47406,"byte_end":47419,"line_start":1329,"line_end":1329,"column_start":12,"column_end":25},"name":"encode_append","qualname":"<Encoding>::encode_append","value":"fn (&self, input: &[u8], output: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends the encoding of `input` to `output`","sig":null,"attributes":[{"value":"/ Appends the encoding of `input` to `output`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":46987,"byte_end":47034,"line_start":1316,"line_end":1316,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47039,"byte_end":47042,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47047,"byte_end":47061,"line_start":1318,"line_end":1318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47066,"byte_end":47069,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47074,"byte_end":47085,"line_start":1320,"line_end":1320,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47090,"byte_end":47120,"line_start":1321,"line_end":1321,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47125,"byte_end":47161,"line_start":1322,"line_end":1322,"column_start":5,"column_end":41}},{"value":"/ let input = b\"Hello world\";","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47166,"byte_end":47197,"line_start":1323,"line_end":1323,"column_start":5,"column_end":36}},{"value":"/ let mut output = \"Result: \".to_string();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47202,"byte_end":47246,"line_start":1324,"line_end":1324,"column_start":5,"column_end":49}},{"value":"/ BASE64.encode_append(input, &mut output);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47251,"byte_end":47296,"line_start":1325,"line_end":1325,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(output, \"Result: SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47301,"byte_end":47352,"line_start":1326,"line_end":1326,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47357,"byte_end":47364,"line_start":1327,"line_end":1327,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47369,"byte_end":47394,"line_start":1328,"line_end":1328,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47936,"byte_end":47942,"line_start":1345,"line_end":1345,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoding>::encode","value":"fn (&self, input: &[u8]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns encoded `input`","sig":null,"attributes":[{"value":"/ Returns encoded `input`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47698,"byte_end":47725,"line_start":1336,"line_end":1336,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47730,"byte_end":47733,"line_start":1337,"line_end":1337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47738,"byte_end":47752,"line_start":1338,"line_end":1338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47757,"byte_end":47760,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47765,"byte_end":47776,"line_start":1340,"line_end":1340,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47781,"byte_end":47811,"line_start":1341,"line_end":1341,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47816,"byte_end":47882,"line_start":1342,"line_end":1342,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47887,"byte_end":47894,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":47899,"byte_end":47924,"line_start":1344,"line_end":1344,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48641,"byte_end":48651,"line_start":1363,"line_end":1363,"column_start":12,"column_end":22},"name":"decode_len","qualname":"<Encoding>::decode_len","value":"fn (&self, len: usize) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the decoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the decoded length of an input of length `len`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48153,"byte_end":48211,"line_start":1351,"line_end":1351,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48216,"byte_end":48219,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ See [`decode_mut`] for when to use it.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48224,"byte_end":48266,"line_start":1353,"line_end":1353,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48271,"byte_end":48274,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48279,"byte_end":48291,"line_start":1355,"line_end":1355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48296,"byte_end":48299,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `len` is invalid. The error kind is [`Length`] and","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48304,"byte_end":48378,"line_start":1357,"line_end":1357,"column_start":5,"column_end":79}},{"value":"/ the [position] is the greatest valid input length.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48383,"byte_end":48437,"line_start":1358,"line_end":1358,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48442,"byte_end":48445,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ [`decode_mut`]: struct.Encoding.html#method.decode_mut","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48450,"byte_end":48508,"line_start":1360,"line_end":1360,"column_start":5,"column_end":63}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48513,"byte_end":48564,"line_start":1361,"line_end":1361,"column_start":5,"column_end":56}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":48569,"byte_end":48629,"line_start":1362,"line_end":1362,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50768,"byte_end":50778,"line_start":1416,"line_end":1416,"column_start":12,"column_end":22},"name":"decode_mut","qualname":"<Encoding>::decode_mut","value":"fn (&self, input: &[u8], output: &mut [u8]) -> Result<usize, DecodePartial>","parent":null,"children":[],"decl_id":null,"docs":" Decodes `input` in `output`","sig":null,"attributes":[{"value":"/ Decodes `input` in `output`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49057,"byte_end":49088,"line_start":1376,"line_end":1376,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49093,"byte_end":49096,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ Returns the length of the decoded output. This length may be smaller","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49101,"byte_end":49173,"line_start":1378,"line_end":1378,"column_start":5,"column_end":77}},{"value":"/ than the output length if the input contained padding or ignored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49178,"byte_end":49246,"line_start":1379,"line_end":1379,"column_start":5,"column_end":73}},{"value":"/ characters. The output bytes after the returned length are not","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49251,"byte_end":49317,"line_start":1380,"line_end":1380,"column_start":5,"column_end":71}},{"value":"/ initialized and should not be read.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49322,"byte_end":49361,"line_start":1381,"line_end":1381,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49366,"byte_end":49369,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49374,"byte_end":49386,"line_start":1383,"line_end":1383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49391,"byte_end":49394,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49399,"byte_end":49461,"line_start":1385,"line_end":1385,"column_start":5,"column_end":67}},{"value":"/ [`decode_len`] for the `input` length. Also panics if `decode_len` fails","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49466,"byte_end":49542,"line_start":1386,"line_end":1386,"column_start":5,"column_end":81}},{"value":"/ for the `input` length.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49547,"byte_end":49574,"line_start":1387,"line_end":1387,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49579,"byte_end":49582,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49587,"byte_end":49599,"line_start":1389,"line_end":1389,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49604,"byte_end":49607,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. See [`decode`] for more details.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49612,"byte_end":49688,"line_start":1391,"line_end":1391,"column_start":5,"column_end":81}},{"value":"/ The are two differences though:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49693,"byte_end":49728,"line_start":1392,"line_end":1392,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49733,"byte_end":49736,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] may be returned only if the encoding allows ignored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49741,"byte_end":49809,"line_start":1394,"line_end":1394,"column_start":5,"column_end":73}},{"value":"/ characters, because otherwise this is already checked by [`decode_len`].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49814,"byte_end":49890,"line_start":1395,"line_end":1395,"column_start":5,"column_end":81}},{"value":"/ - The [`read`] first bytes of the input have been successfully decoded","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49895,"byte_end":49969,"line_start":1396,"line_end":1396,"column_start":5,"column_end":79}},{"value":"/ to the [`written`] first bytes of the output.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":49974,"byte_end":50023,"line_start":1397,"line_end":1397,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50028,"byte_end":50031,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50036,"byte_end":50050,"line_start":1399,"line_end":1399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50055,"byte_end":50058,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50063,"byte_end":50074,"line_start":1401,"line_end":1401,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50079,"byte_end":50109,"line_start":1402,"line_end":1402,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50114,"byte_end":50150,"line_start":1403,"line_end":1403,"column_start":5,"column_end":41}},{"value":"/ let input = b\"SGVsbA==byB3b3JsZA==\";","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50155,"byte_end":50195,"line_start":1404,"line_end":1404,"column_start":5,"column_end":45}},{"value":"/ let output = &mut buffer[0 .. BASE64.decode_len(input.len()).unwrap()];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50200,"byte_end":50275,"line_start":1405,"line_end":1405,"column_start":5,"column_end":80}},{"value":"/ let len = BASE64.decode_mut(input, output).unwrap();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50280,"byte_end":50336,"line_start":1406,"line_end":1406,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50341,"byte_end":50391,"line_start":1407,"line_end":1407,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50396,"byte_end":50403,"line_start":1408,"line_end":1408,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50408,"byte_end":50411,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ [`decode_len`]: struct.Encoding.html#method.decode_len","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50416,"byte_end":50474,"line_start":1410,"line_end":1410,"column_start":5,"column_end":63}},{"value":"/ [`decode`]: struct.Encoding.html#method.decode","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50479,"byte_end":50529,"line_start":1411,"line_end":1411,"column_start":5,"column_end":55}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50534,"byte_end":50585,"line_start":1412,"line_end":1412,"column_start":5,"column_end":56}},{"value":"/ [`read`]: struct.DecodePartial.html#structfield.read","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50590,"byte_end":50646,"line_start":1413,"line_end":1413,"column_start":5,"column_end":61}},{"value":"/ [`written`]: struct.DecodePartial.html#structfield.written","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50651,"byte_end":50713,"line_start":1414,"line_end":1414,"column_start":5,"column_end":67}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":50718,"byte_end":50756,"line_start":1415,"line_end":1415,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52601,"byte_end":52607,"line_start":1458,"line_end":1458,"column_start":12,"column_end":18},"name":"decode","qualname":"<Encoding>::decode","value":"fn (&self, input: &[u8]) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns decoded `input`","sig":null,"attributes":[{"value":"/ Returns decoded `input`","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51269,"byte_end":51296,"line_start":1428,"line_end":1428,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51301,"byte_end":51304,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51309,"byte_end":51321,"line_start":1430,"line_end":1430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51326,"byte_end":51329,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. The error kind can be:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51334,"byte_end":51400,"line_start":1432,"line_end":1432,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51405,"byte_end":51408,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] if the input length is invalid. The [position] is the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51413,"byte_end":51483,"line_start":1434,"line_end":1434,"column_start":5,"column_end":75}},{"value":"/ greatest valid input length.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51488,"byte_end":51520,"line_start":1435,"line_end":1435,"column_start":5,"column_end":37}},{"value":"/ - [`Symbol`] if the input contains an invalid character. The [position]","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51525,"byte_end":51600,"line_start":1436,"line_end":1436,"column_start":5,"column_end":80}},{"value":"/ is the first invalid character.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51605,"byte_end":51640,"line_start":1437,"line_end":1437,"column_start":5,"column_end":40}},{"value":"/ - [`Trailing`] if the input has non-zero trailing bits. This is only","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51645,"byte_end":51717,"line_start":1438,"line_end":1438,"column_start":5,"column_end":77}},{"value":"/ possible if the encoding checks trailing bits. The [position] is the","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51722,"byte_end":51794,"line_start":1439,"line_end":1439,"column_start":5,"column_end":77}},{"value":"/ first character containing non-zero trailing bits.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51799,"byte_end":51853,"line_start":1440,"line_end":1440,"column_start":5,"column_end":59}},{"value":"/ - [`Padding`] if the input has an invalid padding length. This is only","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51858,"byte_end":51932,"line_start":1441,"line_end":1441,"column_start":5,"column_end":79}},{"value":"/ possible if the encoding uses padding. The [position] is the first","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":51937,"byte_end":52007,"line_start":1442,"line_end":1442,"column_start":5,"column_end":75}},{"value":"/ padding character of the first padding of invalid length.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52012,"byte_end":52073,"line_start":1443,"line_end":1443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52078,"byte_end":52081,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52086,"byte_end":52100,"line_start":1445,"line_end":1445,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52105,"byte_end":52108,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52113,"byte_end":52124,"line_start":1447,"line_end":1447,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52129,"byte_end":52159,"line_start":1448,"line_end":1448,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.decode(b\"SGVsbA==byB3b3JsZA==\").unwrap(), b\"Hello world\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52164,"byte_end":52244,"line_start":1449,"line_end":1449,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52249,"byte_end":52256,"line_start":1450,"line_end":1450,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52261,"byte_end":52264,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52269,"byte_end":52320,"line_start":1452,"line_end":1452,"column_start":5,"column_end":56}},{"value":"/ [`Symbol`]: enum.DecodeKind.html#variant.Symbol","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52325,"byte_end":52376,"line_start":1453,"line_end":1453,"column_start":5,"column_end":56}},{"value":"/ [`Trailing`]: enum.DecodeKind.html#variant.Trailing","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52381,"byte_end":52436,"line_start":1454,"line_end":1454,"column_start":5,"column_end":60}},{"value":"/ [`Padding`]: enum.DecodeKind.html#variant.Padding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52441,"byte_end":52494,"line_start":1455,"line_end":1455,"column_start":5,"column_end":58}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52499,"byte_end":52559,"line_start":1456,"line_end":1456,"column_start":5,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52564,"byte_end":52589,"line_start":1457,"line_end":1457,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52916,"byte_end":52925,"line_start":1466,"line_end":1466,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<Encoding>::bit_width","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the bit-width\n","sig":null,"attributes":[{"value":"/ Returns the bit-width","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52879,"byte_end":52904,"line_start":1465,"line_end":1465,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53261,"byte_end":53273,"line_start":1478,"line_end":1478,"column_start":12,"column_end":24},"name":"is_canonical","qualname":"<Encoding>::is_canonical","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the encoding is canonical","sig":null,"attributes":[{"value":"/ Returns whether the encoding is canonical","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":52974,"byte_end":53019,"line_start":1470,"line_end":1470,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53024,"byte_end":53027,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ An encoding is not canonical if one of the following conditions holds:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53032,"byte_end":53106,"line_start":1472,"line_end":1472,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53111,"byte_end":53114,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ - trailing bits are not checked","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53119,"byte_end":53154,"line_start":1474,"line_end":1474,"column_start":5,"column_end":40}},{"value":"/ - padding is used","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53159,"byte_end":53180,"line_start":1475,"line_end":1475,"column_start":5,"column_end":26}},{"value":"/ - characters are ignored","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53185,"byte_end":53213,"line_start":1476,"line_end":1476,"column_start":5,"column_end":33}},{"value":"/ - characters are translated","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53218,"byte_end":53249,"line_start":1477,"line_end":1477,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53832,"byte_end":53845,"line_start":1501,"line_end":1501,"column_start":12,"column_end":25},"name":"specification","qualname":"<Encoding>::specification","value":"fn (&self) -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoding specification\n","sig":null,"attributes":[{"value":"/ Returns the encoding specification","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53752,"byte_end":53790,"line_start":1499,"line_end":1499,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":53795,"byte_end":53820,"line_start":1500,"line_end":1500,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":55295,"byte_end":55307,"line_start":1540,"line_end":1540,"column_start":18,"column_end":30},"name":"internal_new","qualname":"<Encoding>::internal_new","value":"fn (implementation: &'static [u8]) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":55593,"byte_end":55616,"line_start":1549,"line_end":1549,"column_start":12,"column_end":35},"name":"internal_implementation","qualname":"<Encoding>::internal_implementation","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":56034,"byte_end":56052,"line_start":1572,"line_end":1572,"column_start":12,"column_end":30},"name":"SpecificationError","qualname":"::SpecificationError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Specification error\n","sig":null,"attributes":[{"value":"/ Specification error","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":55943,"byte_end":55966,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":55997,"byte_end":56022,"line_start":1571,"line_end":1571,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57518,"byte_end":57521,"line_start":1609,"line_end":1609,"column_start":12,"column_end":15},"name":"new","qualname":"<Specification>::new","value":"fn () -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns a default specification\n","sig":null,"attributes":[{"value":"/ Returns a default specification","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57471,"byte_end":57506,"line_start":1608,"line_end":1608,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":58047,"byte_end":58055,"line_start":1626,"line_end":1626,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Specification>::encoding","value":"fn (&self) -> Result<Encoding, SpecificationError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the specified encoding","sig":null,"attributes":[{"value":"/ Returns the specified encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57910,"byte_end":57944,"line_start":1621,"line_end":1621,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57949,"byte_end":57952,"line_start":1622,"line_end":1622,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57957,"byte_end":57969,"line_start":1623,"line_end":1623,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57974,"byte_end":57977,"line_start":1624,"line_end":1624,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the specification is invalid.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57982,"byte_end":58035,"line_start":1625,"line_end":1625,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":173},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61716,"byte_end":61724,"line_start":1731,"line_end":1731,"column_start":11,"column_end":19},"name":"HEXLOWER","qualname":"::HEXLOWER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61163,"byte_end":61197,"line_start":1712,"line_end":1712,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61198,"byte_end":61201,"line_start":1713,"line_end":1713,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61202,"byte_end":61243,"line_start":1714,"line_end":1714,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61244,"byte_end":61247,"line_start":1715,"line_end":1715,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61248,"byte_end":61259,"line_start":1716,"line_end":1716,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61260,"byte_end":61311,"line_start":1717,"line_end":1717,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61312,"byte_end":61352,"line_start":1718,"line_end":1718,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61353,"byte_end":61399,"line_start":1719,"line_end":1719,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXLOWER, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61400,"byte_end":61451,"line_start":1720,"line_end":1720,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61452,"byte_end":61459,"line_start":1721,"line_end":1721,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61460,"byte_end":61463,"line_start":1722,"line_end":1722,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61464,"byte_end":61478,"line_start":1723,"line_end":1723,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61479,"byte_end":61482,"line_start":1724,"line_end":1724,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61483,"byte_end":61494,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61495,"byte_end":61527,"line_start":1726,"line_end":1726,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61528,"byte_end":61576,"line_start":1727,"line_end":1727,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER.decode(b\"deadbeef\").unwrap(), deadbeef);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61577,"byte_end":61641,"line_start":1728,"line_end":1728,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXLOWER.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61642,"byte_end":61697,"line_start":1729,"line_end":1729,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":61698,"byte_end":61705,"line_start":1730,"line_end":1730,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":175},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65143,"byte_end":65162,"line_start":1788,"line_end":1788,"column_start":11,"column_end":30},"name":"HEXLOWER_PERMISSIVE","qualname":"::HEXLOWER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64247,"byte_end":64312,"line_start":1760,"line_end":1760,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64313,"byte_end":64316,"line_start":1761,"line_end":1761,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64317,"byte_end":64358,"line_start":1762,"line_end":1762,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64359,"byte_end":64362,"line_start":1763,"line_end":1763,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64363,"byte_end":64374,"line_start":1764,"line_end":1764,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER_PERMISSIVE};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64375,"byte_end":64437,"line_start":1765,"line_end":1765,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64438,"byte_end":64478,"line_start":1766,"line_end":1766,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64479,"byte_end":64525,"line_start":1767,"line_end":1767,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"ABCDEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64526,"byte_end":64569,"line_start":1768,"line_end":1768,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64570,"byte_end":64611,"line_start":1769,"line_end":1769,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64612,"byte_end":64674,"line_start":1770,"line_end":1770,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64675,"byte_end":64682,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64683,"byte_end":64686,"line_start":1772,"line_end":1772,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64687,"byte_end":64701,"line_start":1773,"line_end":1773,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64702,"byte_end":64705,"line_start":1774,"line_end":1774,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64706,"byte_end":64717,"line_start":1775,"line_end":1775,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER_PERMISSIVE;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64718,"byte_end":64761,"line_start":1776,"line_end":1776,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64762,"byte_end":64810,"line_start":1777,"line_end":1777,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64811,"byte_end":64886,"line_start":1778,"line_end":1778,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64887,"byte_end":64953,"line_start":1779,"line_end":1779,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64954,"byte_end":64961,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64962,"byte_end":64965,"line_start":1781,"line_end":1781,"column_start":1,"column_end":4}},{"value":"/ You can also define a shorter name:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":64966,"byte_end":65005,"line_start":1782,"line_end":1782,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65006,"byte_end":65009,"line_start":1783,"line_end":1783,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65010,"byte_end":65021,"line_start":1784,"line_end":1784,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, HEXLOWER_PERMISSIVE};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65022,"byte_end":65077,"line_start":1785,"line_end":1785,"column_start":1,"column_end":56}},{"value":"/ const HEX: Encoding = HEXLOWER_PERMISSIVE;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65078,"byte_end":65124,"line_start":1786,"line_end":1786,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":65125,"byte_end":65132,"line_start":1787,"line_end":1787,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":177},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68390,"byte_end":68398,"line_start":1840,"line_end":1840,"column_start":11,"column_end":19},"name":"HEXUPPER","qualname":"::HEXUPPER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67701,"byte_end":67735,"line_start":1817,"line_end":1817,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67736,"byte_end":67739,"line_start":1818,"line_end":1818,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67740,"byte_end":67781,"line_start":1819,"line_end":1819,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67782,"byte_end":67785,"line_start":1820,"line_end":1820,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67786,"byte_end":67797,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67798,"byte_end":67849,"line_start":1822,"line_end":1822,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67850,"byte_end":67890,"line_start":1823,"line_end":1823,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67891,"byte_end":67937,"line_start":1824,"line_end":1824,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXUPPER, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67938,"byte_end":67989,"line_start":1825,"line_end":1825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67990,"byte_end":67997,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":67998,"byte_end":68001,"line_start":1827,"line_end":1827,"column_start":1,"column_end":4}},{"value":"/ It is compliant with [RFC4648] and known as \"base16\" or \"hex\".","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68002,"byte_end":68068,"line_start":1828,"line_end":1828,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68069,"byte_end":68072,"line_start":1829,"line_end":1829,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68073,"byte_end":68087,"line_start":1830,"line_end":1830,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68088,"byte_end":68091,"line_start":1831,"line_end":1831,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68092,"byte_end":68103,"line_start":1832,"line_end":1832,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68104,"byte_end":68136,"line_start":1833,"line_end":1833,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68137,"byte_end":68185,"line_start":1834,"line_end":1834,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER.decode(b\"DEADBEEF\").unwrap(), deadbeef);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68186,"byte_end":68250,"line_start":1835,"line_end":1835,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXUPPER.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68251,"byte_end":68306,"line_start":1836,"line_end":1836,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68307,"byte_end":68314,"line_start":1837,"line_end":1837,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68315,"byte_end":68318,"line_start":1838,"line_end":1838,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-8","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":68319,"byte_end":68379,"line_start":1839,"line_end":1839,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":179},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71594,"byte_end":71613,"line_start":1889,"line_end":1889,"column_start":11,"column_end":30},"name":"HEXUPPER_PERMISSIVE","qualname":"::HEXUPPER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70869,"byte_end":70934,"line_start":1868,"line_end":1868,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70935,"byte_end":70938,"line_start":1869,"line_end":1869,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70939,"byte_end":70980,"line_start":1870,"line_end":1870,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70981,"byte_end":70984,"line_start":1871,"line_end":1871,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70985,"byte_end":70996,"line_start":1872,"line_end":1872,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER_PERMISSIVE};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":70997,"byte_end":71059,"line_start":1873,"line_end":1873,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71060,"byte_end":71100,"line_start":1874,"line_end":1874,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71101,"byte_end":71147,"line_start":1875,"line_end":1875,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"abcdef\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71148,"byte_end":71191,"line_start":1876,"line_end":1876,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"ABCDEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71192,"byte_end":71233,"line_start":1877,"line_end":1877,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71234,"byte_end":71296,"line_start":1878,"line_end":1878,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71297,"byte_end":71304,"line_start":1879,"line_end":1879,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71305,"byte_end":71308,"line_start":1880,"line_end":1880,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71309,"byte_end":71323,"line_start":1881,"line_end":1881,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71324,"byte_end":71327,"line_start":1882,"line_end":1882,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71328,"byte_end":71339,"line_start":1883,"line_end":1883,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER_PERMISSIVE;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71340,"byte_end":71383,"line_start":1884,"line_end":1884,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71384,"byte_end":71432,"line_start":1885,"line_end":1885,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71433,"byte_end":71508,"line_start":1886,"line_end":1886,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71509,"byte_end":71575,"line_start":1887,"line_end":1887,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":71576,"byte_end":71583,"line_start":1888,"line_end":1888,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":181},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74542,"byte_end":74548,"line_start":1932,"line_end":1932,"column_start":11,"column_end":17},"name":"BASE32","qualname":"::BASE32","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32 encoding","sig":null,"attributes":[{"value":"/ Padded base32 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74100,"byte_end":74126,"line_start":1917,"line_end":1917,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74127,"byte_end":74130,"line_start":1918,"line_end":1918,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74131,"byte_end":74172,"line_start":1919,"line_end":1919,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74173,"byte_end":74176,"line_start":1920,"line_end":1920,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74177,"byte_end":74188,"line_start":1921,"line_end":1921,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74189,"byte_end":74238,"line_start":1922,"line_end":1922,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74239,"byte_end":74279,"line_start":1923,"line_end":1923,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74280,"byte_end":74342,"line_start":1924,"line_end":1924,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74343,"byte_end":74372,"line_start":1925,"line_end":1925,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74373,"byte_end":74422,"line_start":1926,"line_end":1926,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74423,"byte_end":74430,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74431,"byte_end":74434,"line_start":1928,"line_end":1928,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74435,"byte_end":74466,"line_start":1929,"line_end":1929,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74467,"byte_end":74470,"line_start":1930,"line_end":1930,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-6","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":74471,"byte_end":74531,"line_start":1931,"line_end":1931,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":183},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77323,"byte_end":77335,"line_start":1970,"line_end":1970,"column_start":11,"column_end":23},"name":"BASE32_NOPAD","qualname":"::BASE32_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32 encoding","sig":null,"attributes":[{"value":"/ Unpadded base32 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":76998,"byte_end":77026,"line_start":1960,"line_end":1960,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77027,"byte_end":77030,"line_start":1961,"line_end":1961,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77031,"byte_end":77072,"line_start":1962,"line_end":1962,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77073,"byte_end":77076,"line_start":1963,"line_end":1963,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77077,"byte_end":77088,"line_start":1964,"line_end":1964,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_NOPAD};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77089,"byte_end":77144,"line_start":1965,"line_end":1965,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77145,"byte_end":77185,"line_start":1966,"line_end":1966,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77186,"byte_end":77248,"line_start":1967,"line_end":1967,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77249,"byte_end":77304,"line_start":1968,"line_end":1968,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":77305,"byte_end":77312,"line_start":1969,"line_end":1969,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":185},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80249,"byte_end":80258,"line_start":2013,"line_end":2013,"column_start":11,"column_end":20},"name":"BASE32HEX","qualname":"::BASE32HEX","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32hex encoding","sig":null,"attributes":[{"value":"/ Padded base32hex encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79798,"byte_end":79827,"line_start":1998,"line_end":1998,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79828,"byte_end":79831,"line_start":1999,"line_end":1999,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79832,"byte_end":79873,"line_start":2000,"line_end":2000,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79874,"byte_end":79877,"line_start":2001,"line_end":2001,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79878,"byte_end":79889,"line_start":2002,"line_end":2002,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79890,"byte_end":79942,"line_start":2003,"line_end":2003,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79943,"byte_end":79983,"line_start":2004,"line_end":2004,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":79984,"byte_end":80046,"line_start":2005,"line_end":2005,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80047,"byte_end":80076,"line_start":2006,"line_end":2006,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32HEX, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80077,"byte_end":80129,"line_start":2007,"line_end":2007,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80130,"byte_end":80137,"line_start":2008,"line_end":2008,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80138,"byte_end":80141,"line_start":2009,"line_end":2009,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80142,"byte_end":80173,"line_start":2010,"line_end":2010,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80174,"byte_end":80177,"line_start":2011,"line_end":2011,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-7","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":80178,"byte_end":80238,"line_start":2012,"line_end":2012,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":187},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":83048,"byte_end":83063,"line_start":2051,"line_end":2051,"column_start":11,"column_end":26},"name":"BASE32HEX_NOPAD","qualname":"::BASE32HEX_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32hex encoding","sig":null,"attributes":[{"value":"/ Unpadded base32hex encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82714,"byte_end":82745,"line_start":2041,"line_end":2041,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82746,"byte_end":82749,"line_start":2042,"line_end":2042,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82750,"byte_end":82791,"line_start":2043,"line_end":2043,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82792,"byte_end":82795,"line_start":2044,"line_end":2044,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82796,"byte_end":82807,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX_NOPAD};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82808,"byte_end":82866,"line_start":2046,"line_end":2046,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82867,"byte_end":82907,"line_start":2047,"line_end":2047,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82908,"byte_end":82970,"line_start":2048,"line_end":2048,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32HEX_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":82971,"byte_end":83029,"line_start":2049,"line_end":2049,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":83030,"byte_end":83037,"line_start":2050,"line_end":2050,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":189},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86224,"byte_end":86237,"line_start":2099,"line_end":2099,"column_start":11,"column_end":24},"name":"BASE32_DNSSEC","qualname":"::BASE32_DNSSEC","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSSEC base32 encoding","sig":null,"attributes":[{"value":"/ DNSSEC base32 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85532,"byte_end":85558,"line_start":2079,"line_end":2079,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85559,"byte_end":85562,"line_start":2080,"line_end":2080,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85563,"byte_end":85604,"line_start":2081,"line_end":2081,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85605,"byte_end":85608,"line_start":2082,"line_end":2082,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85609,"byte_end":85620,"line_start":2083,"line_end":2083,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_DNSSEC};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85621,"byte_end":85677,"line_start":2084,"line_end":2084,"column_start":1,"column_end":57}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85678,"byte_end":85718,"line_start":2085,"line_end":2085,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdefghijklmnopqrstuv\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85719,"byte_end":85781,"line_start":2086,"line_end":2086,"column_start":1,"column_end":63}},{"value":"/ spec.translate.from.push_str(\"ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85782,"byte_end":85841,"line_start":2087,"line_end":2087,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"abcdefghijklmnopqrstuv\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85842,"byte_end":85899,"line_start":2088,"line_end":2088,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSSEC, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85900,"byte_end":85956,"line_start":2089,"line_end":2089,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85957,"byte_end":85964,"line_start":2090,"line_end":2090,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85965,"byte_end":85968,"line_start":2091,"line_end":2091,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC5155]:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":85969,"byte_end":86000,"line_start":2092,"line_end":2092,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86001,"byte_end":86004,"line_start":2093,"line_end":2093,"column_start":1,"column_end":4}},{"value":"/ - It uses a base32 extended hex alphabet.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86005,"byte_end":86050,"line_start":2094,"line_end":2094,"column_start":1,"column_end":46}},{"value":"/ - It is case-insensitive when decoding and uses lowercase when encoding.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86051,"byte_end":86127,"line_start":2095,"line_end":2095,"column_start":1,"column_end":77}},{"value":"/ - It does not use padding.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86128,"byte_end":86158,"line_start":2096,"line_end":2096,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86159,"byte_end":86162,"line_start":2097,"line_end":2097,"column_start":1,"column_end":4}},{"value":"/ [RFC5155]: https://tools.ietf.org/html/rfc5155","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":86163,"byte_end":86213,"line_start":2098,"line_end":2098,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":191},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89449,"byte_end":89464,"line_start":2146,"line_end":2146,"column_start":11,"column_end":26},"name":"BASE32_DNSCURVE","qualname":"::BASE32_DNSCURVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSCurve base32 encoding","sig":null,"attributes":[{"value":"/ DNSCurve base32 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88840,"byte_end":88868,"line_start":2129,"line_end":2129,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88869,"byte_end":88872,"line_start":2130,"line_end":2130,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88873,"byte_end":88914,"line_start":2131,"line_end":2131,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88915,"byte_end":88918,"line_start":2132,"line_end":2132,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88919,"byte_end":88930,"line_start":2133,"line_end":2133,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{BitOrder, Specification, BASE32_DNSCURVE};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":88931,"byte_end":88999,"line_start":2134,"line_end":2134,"column_start":1,"column_end":69}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89000,"byte_end":89040,"line_start":2135,"line_end":2135,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89041,"byte_end":89103,"line_start":2136,"line_end":2136,"column_start":1,"column_end":63}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89104,"byte_end":89157,"line_start":2137,"line_end":2137,"column_start":1,"column_end":54}},{"value":"/ spec.translate.from.push_str(\"BCDFGHJKLMNPQRSTUVWXYZ\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89158,"byte_end":89217,"line_start":2138,"line_end":2138,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89218,"byte_end":89275,"line_start":2139,"line_end":2139,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSCURVE, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89276,"byte_end":89334,"line_start":2140,"line_end":2140,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89335,"byte_end":89342,"line_start":2141,"line_end":2141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89343,"byte_end":89346,"line_start":2142,"line_end":2142,"column_start":1,"column_end":4}},{"value":"/ It is conform to [DNSCurve].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89347,"byte_end":89379,"line_start":2143,"line_end":2143,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89380,"byte_end":89383,"line_start":2144,"line_end":2144,"column_start":1,"column_end":4}},{"value":"/ [DNSCurve]: https://dnscurve.org/in-implement.html","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":89384,"byte_end":89438,"line_start":2145,"line_end":2145,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":193},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92553,"byte_end":92559,"line_start":2191,"line_end":2191,"column_start":11,"column_end":17},"name":"BASE64","qualname":"::BASE64","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64 encoding","sig":null,"attributes":[{"value":"/ Padded base64 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92079,"byte_end":92105,"line_start":2176,"line_end":2176,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92106,"byte_end":92109,"line_start":2177,"line_end":2177,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92110,"byte_end":92151,"line_start":2178,"line_end":2178,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92152,"byte_end":92155,"line_start":2179,"line_end":2179,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92156,"byte_end":92167,"line_start":2180,"line_end":2180,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92168,"byte_end":92217,"line_start":2181,"line_end":2181,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92218,"byte_end":92258,"line_start":2182,"line_end":2182,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92259,"byte_end":92353,"line_start":2183,"line_end":2183,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92354,"byte_end":92383,"line_start":2184,"line_end":2184,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92384,"byte_end":92433,"line_start":2185,"line_end":2185,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92434,"byte_end":92441,"line_start":2186,"line_end":2186,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92442,"byte_end":92445,"line_start":2187,"line_end":2187,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92446,"byte_end":92477,"line_start":2188,"line_end":2188,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92478,"byte_end":92481,"line_start":2189,"line_end":2189,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-4","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":92482,"byte_end":92542,"line_start":2190,"line_end":2190,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":195},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95430,"byte_end":95442,"line_start":2230,"line_end":2230,"column_start":11,"column_end":23},"name":"BASE64_NOPAD","qualname":"::BASE64_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64 encoding","sig":null,"attributes":[{"value":"/ Unpadded base64 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95073,"byte_end":95101,"line_start":2220,"line_end":2220,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95102,"byte_end":95105,"line_start":2221,"line_end":2221,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95106,"byte_end":95147,"line_start":2222,"line_end":2222,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95148,"byte_end":95151,"line_start":2223,"line_end":2223,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95152,"byte_end":95163,"line_start":2224,"line_end":2224,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95164,"byte_end":95219,"line_start":2225,"line_end":2225,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95220,"byte_end":95260,"line_start":2226,"line_end":2226,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95261,"byte_end":95355,"line_start":2227,"line_end":2227,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95356,"byte_end":95411,"line_start":2228,"line_end":2228,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":95412,"byte_end":95419,"line_start":2229,"line_end":2229,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":197},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98603,"byte_end":98614,"line_start":2277,"line_end":2277,"column_start":11,"column_end":22},"name":"BASE64_MIME","qualname":"::BASE64_MIME","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" MIME base64 encoding","sig":null,"attributes":[{"value":"/ MIME base64 encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":97969,"byte_end":97993,"line_start":2259,"line_end":2259,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":97994,"byte_end":97997,"line_start":2260,"line_end":2260,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":97998,"byte_end":98039,"line_start":2261,"line_end":2261,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98040,"byte_end":98043,"line_start":2262,"line_end":2262,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98044,"byte_end":98055,"line_start":2263,"line_end":2263,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, Wrap, BASE64_MIME};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98056,"byte_end":98116,"line_start":2264,"line_end":2264,"column_start":1,"column_end":61}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98117,"byte_end":98157,"line_start":2265,"line_end":2265,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98158,"byte_end":98252,"line_start":2266,"line_end":2266,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98253,"byte_end":98282,"line_start":2267,"line_end":2267,"column_start":1,"column_end":30}},{"value":"/ spec.wrap.width = 76;","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98283,"byte_end":98308,"line_start":2268,"line_end":2268,"column_start":1,"column_end":26}},{"value":"/ spec.wrap.separator.push_str(\"\\r\\n\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98309,"byte_end":98350,"line_start":2269,"line_end":2269,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(BASE64_MIME, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98351,"byte_end":98405,"line_start":2270,"line_end":2270,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98406,"byte_end":98413,"line_start":2271,"line_end":2271,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98414,"byte_end":98417,"line_start":2272,"line_end":2272,"column_start":1,"column_end":4}},{"value":"/ It is not exactly conform to [RFC2045] because it does not print the header","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98418,"byte_end":98497,"line_start":2273,"line_end":2273,"column_start":1,"column_end":80}},{"value":"/ and does not ignore all characters.","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98498,"byte_end":98537,"line_start":2274,"line_end":2274,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98538,"byte_end":98541,"line_start":2275,"line_end":2275,"column_start":1,"column_end":4}},{"value":"/ [RFC2045]: https://tools.ietf.org/html/rfc2045","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":98542,"byte_end":98592,"line_start":2276,"line_end":2276,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":199},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101633,"byte_end":101642,"line_start":2321,"line_end":2321,"column_start":11,"column_end":20},"name":"BASE64URL","qualname":"::BASE64URL","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64url encoding","sig":null,"attributes":[{"value":"/ Padded base64url encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101150,"byte_end":101179,"line_start":2306,"line_end":2306,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101180,"byte_end":101183,"line_start":2307,"line_end":2307,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101184,"byte_end":101225,"line_start":2308,"line_end":2308,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101226,"byte_end":101229,"line_start":2309,"line_end":2309,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101230,"byte_end":101241,"line_start":2310,"line_end":2310,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101242,"byte_end":101294,"line_start":2311,"line_end":2311,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101295,"byte_end":101335,"line_start":2312,"line_end":2312,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101336,"byte_end":101430,"line_start":2313,"line_end":2313,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101431,"byte_end":101460,"line_start":2314,"line_end":2314,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64URL, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101461,"byte_end":101513,"line_start":2315,"line_end":2315,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101514,"byte_end":101521,"line_start":2316,"line_end":2316,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101522,"byte_end":101525,"line_start":2317,"line_end":2317,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101526,"byte_end":101557,"line_start":2318,"line_end":2318,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101558,"byte_end":101561,"line_start":2319,"line_end":2319,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-5","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":101562,"byte_end":101622,"line_start":2320,"line_end":2320,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":201},"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104528,"byte_end":104543,"line_start":2360,"line_end":2360,"column_start":11,"column_end":26},"name":"BASE64URL_NOPAD","qualname":"::BASE64URL_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64url encoding","sig":null,"attributes":[{"value":"/ Unpadded base64url encoding","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104162,"byte_end":104193,"line_start":2350,"line_end":2350,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104194,"byte_end":104197,"line_start":2351,"line_end":2351,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104198,"byte_end":104239,"line_start":2352,"line_end":2352,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104240,"byte_end":104243,"line_start":2353,"line_end":2353,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104244,"byte_end":104255,"line_start":2354,"line_end":2354,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL_NOPAD};","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104256,"byte_end":104314,"line_start":2355,"line_end":2355,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104315,"byte_end":104355,"line_start":2356,"line_end":2356,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104356,"byte_end":104450,"line_start":2357,"line_end":2357,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64URL_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104451,"byte_end":104509,"line_start":2358,"line_end":2358,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":104510,"byte_end":104517,"line_start":2359,"line_end":2359,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":8773,"byte_end":8775,"line_start":231,"line_end":231,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":8908,"byte_end":8910,"line_start":239,"line_end":239,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11126,"byte_end":11136,"line_start":318,"line_end":318,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11881,"byte_end":11892,"line_start":342,"line_end":342,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11947,"byte_end":11958,"line_start":344,"line_end":344,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44590,"byte_end":44603,"line_start":1232,"line_end":1232,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44667,"byte_end":44675,"line_start":1238,"line_end":1238,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":56132,"byte_end":56150,"line_start":1575,"line_end":1575,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":56881,"byte_end":56899,"line_start":1591,"line_end":1591,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57451,"byte_end":57464,"line_start":1607,"line_end":1607,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":8219,"byte_end":8223,"line_start":204,"line_end":204,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1913},"to":{"krate":0,"index":7}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":8773,"byte_end":8775,"line_start":231,"line_end":231,"column_start":37,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":259},"to":{"krate":0,"index":7}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":8908,"byte_end":8910,"line_start":239,"line_end":239,"column_start":37,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":264},"to":{"krate":0,"index":7}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11126,"byte_end":11136,"line_start":318,"line_end":318,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":273},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11881,"byte_end":11892,"line_start":342,"line_end":342,"column_start":28,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":293},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":11947,"byte_end":11958,"line_start":344,"line_end":344,"column_start":28,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":293},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44590,"byte_end":44603,"line_start":1232,"line_end":1232,"column_start":18,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":368},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":44667,"byte_end":44675,"line_start":1238,"line_end":1238,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":56132,"byte_end":56150,"line_start":1575,"line_end":1575,"column_start":28,"column_end":46},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":56881,"byte_end":56899,"line_start":1591,"line_end":1591,"column_start":28,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alexis/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.3.0/src/lib.rs","byte_start":57451,"byte_end":57464,"line_start":1607,"line_end":1607,"column_start":6,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":368},"to":{"krate":4294967295,"index":4294967295}}]}